            den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 1

020A:0640  8A A4 019A		;*		mov	ah,byte ptr ds:[19Ah][si]	; (020A:019A=0DFh)
020A:0640  8A A4 9A 01				db	 8Ah,0A4h, 9Ah, 01h
020A:0644  80 E4 F8				and	ah,0F8h
020A:0647  80 F4 48				xor	ah,48h			; 'H'
020A:064A  5A					pop	dx
020A:064B  5E					pop	si
020A:064C			loc_1:
020A:064C  1E					push	ds
020A:064D  50					push	ax
020A:064E  B8 0040				mov	ax,40h
020A:0651  8E D8				mov	ds,ax
020A:0653  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020A:0659  75 4F				jnz	loc_9			; Jump if not zero
020A:065B  55					push	bp
020A:065C  8B EC				mov	bp,sp
020A:065E  8B 46 0A				mov	ax,[bp+0Ah]
020A:0661  5D					pop	bp
020A:0662  A9 0100				test	ax,100h
020A:0665  75 43				jnz	loc_9			; Jump if not zero
020A:0667  A9 0200				test	ax,200h
020A:066A  74 22				jz	loc_5			; Jump if zero
020A:066C  F0> 81 0E 0314 0200	                           lock	or	word ptr ds:[314h],200h	; (0040:0314=3200h)
020A:0673  F7 06 0314 0003			test	word ptr ds:[314h],3	; (0040:0314=3200h)
020A:0679  75 2F				jnz	loc_9			; Jump if not zero
020A:067B			loc_2:
020A:067B  86 E0				xchg	ah,al
020A:067D  FC					cld				; Clear direction
020A:067E  A8 04				test	al,4
020A:0680  75 25				jnz	loc_8			; Jump if not zero
020A:0682			loc_3:
020A:0682  A8 08				test	al,8
020A:0684  75 11				jnz	loc_6			; Jump if not zero
020A:0686  70 19				jo	loc_7			; Jump if overflow=1
020A:0688			loc_4:
020A:0688  9E					sahf				; Store ah into flags
020A:0689  58					pop	ax
020A:068A  1F					pop	ds
020A:068B  CA 0002				retf	2
020A:068E			loc_5:
020A:068E  F0> 81 26 0314 FDFF	                           lock	and	word ptr ds:[314h],0FDFFh	; (020A:0314=3231h)
020A:0695  EB E4				jmp	short loc_2		; (067B)
020A:0697			loc_6:
020A:0697  70 EF				jo	loc_4			; Jump if overflow=1
020A:0699  50					push	ax
020A:069A  B0 7F				mov	al,7Fh
020A:069C  04 02				add	al,2
020A:069E  58					pop	ax
020A:069F  EB E7				jmp	short loc_4		; (0688)
020A:06A1			loc_7:
020A:06A1  50					push	ax
020A:06A2  32 C0				xor	al,al			; Zero register
020A:06A4  58					pop	ax
020A:06A5  EB E1				jmp	short loc_4		; (0688)
020A:06A7			loc_8:
020A:06A7  FD					std				; Set direction flag
020A:06A8  EB D8				jmp	short loc_3		; (0682)
020A:06AA			loc_9:
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 2

020A:06AA  58					pop	ax
020A:06AB  1F					pop	ds
020A:06AC  CF					iret				; Interrupt return
							                        ;* No entry point to code
020A:06AD  EB 9D				jmp	short loc_1		; (064C)
020A:06AF  C4					db	0C4h
							                        ;* No entry point to code
020A:06B0  C4 72 EB				les	si,dword ptr [bp+si-15h]	; Load 32 bit ptr
020A:06B3  98					cbw				; Convrt byte to word
020A:06B4  C4					db	0C4h
020A:06B5  C4 72 EB				les	si,dword ptr [bp+si-15h]	; Load 32 bit ptr
020A:06B8  93					xchg	bx,ax
020A:06B9  E8 011D				call	sub_4			; (07D9)
020A:06BC  50					push	ax
020A:06BD  53					push	bx
020A:06BE  51					push	cx
020A:06BF  52					push	dx
020A:06C0  1E					push	ds
020A:06C1  B8 0040				mov	ax,40h
020A:06C4  8E D8				mov	ds,ax
020A:06C6  80 3E 0100 01			cmp	byte ptr ds:[100h],1	; (0040:0100=0)
020A:06CB  74 5A				je	loc_15			; Jump if equal
020A:06CD  C6 06 0100 01			mov	byte ptr ds:[100h],1	; (0040:0100=0)
020A:06D2  8A 2E 004A				mov	ch,byte ptr ds:[4Ah]	; (0040:004A=50h)
020A:06D6  8A 0E 0084				mov	cl,byte ptr ds:[84h]	; (0040:0084=18h)
020A:06DA  8A 3E 0062				mov	bh,byte ptr ds:[62h]	; (0040:0062=0)
020A:06DE  E8 004E				call	sub_2			; (072F)
020A:06E1  51					push	cx
020A:06E2  B4 03				mov	ah,3
020A:06E4  CD 10				int	10h			; Video display   ah=functn 03h
										;  get cursor loc in dx, mode cx
020A:06E6  59					pop	cx
020A:06E7  52					push	dx
020A:06E8  32 F6				xor	dh,dh			; Zero register
020A:06EA			loc_10:
020A:06EA  32 D2				xor	dl,dl			; Zero register
020A:06EC			loc_11:
020A:06EC  52					push	dx
020A:06ED  B4 02				mov	ah,2
020A:06EF  CD 10				int	10h			; Video display   ah=functn 02h
										;  set cursor location in dx
020A:06F1  B4 08				mov	ah,8
020A:06F3  CD 10				int	10h			; Video display   ah=functn 08h
										;  get char al & attrib ah @curs
020A:06F5  0A C0				or	al,al			; Zero ?
020A:06F7  75 02				jnz	loc_12			; Jump if not zero
020A:06F9  B0 20				mov	al,20h			; ' '
020A:06FB			loc_12:
020A:06FB  33 D2				xor	dx,dx			; Zero register
020A:06FD  32 E4				xor	ah,ah			; Zero register
020A:06FF  CD			data_79		db	0CDh
020A:0700  17					pop	ss
020A:0701  5A					pop	dx
020A:0702  80 E4 25				and	ah,25h			; '%'
020A:0705  74 07				jz	loc_13			; Jump if zero
020A:0707  C6 06 0100 FF			mov	byte ptr ds:[100h],0FFh	; (0040:0100=0)
020A:070C  EB 14				jmp	short loc_14		; (0722)
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 3

020A:070E			loc_13:
020A:070E  FE C2				inc	dl
020A:0710  3A D5				cmp	dl,ch
020A:0712  72 D8				jb	loc_11			; Jump if below
020A:0714  E8 0018				call	sub_2			; (072F)
020A:0717  FE C6				inc	dh
020A:0719  3A F1				cmp	dh,cl
020A:071B  76 CD				jbe	loc_10			; Jump if below or =
020A:071D  C6 06 0100 00			mov	byte ptr ds:[100h],0	; (0040:0100=0)
020A:0722			loc_14:
020A:0722  5A					pop	dx
020A:0723  B4 02				mov	ah,2
020A:0725  CD 10				int	10h			; Video display   ah=functn 02h
										;  set cursor location in dx
020A:0727			loc_15:
020A:0727  1F					pop	ds
020A:0728  5A					pop	dx
020A:0729  59					pop	cx
020A:072A  5B					pop	bx
020A:072B  58					pop	ax
020A:072C  E9 FF1D				jmp	loc_1			; (064C)

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_2		proc	near
020A:072F  52					push	dx
020A:0730  33 D2				xor	dx,dx			; Zero register
020A:0732  B8 000D				mov	ax,0Dh
020A:0735  CD 17				int	17h			; Printer  dx=prn1, ah=func 00h
										;  print char al, get status ah
020A:0737  33 D2				xor	dx,dx			; Zero register
020A:0739  B8 000A				mov	ax,0Ah
020A:073C  CD 17				int	17h			; Printer  dx=prn1, ah=func 00h
										;  print char al, get status ah
020A:073E  5A					pop	dx
020A:073F  C3					retn
				sub_2		endp

020A:0740  C4					db	0C4h
							                        ;* No entry point to code
020A:0741  C4 06 06E9				les	ax,dword ptr ds:[6E9h]	; (020A:06E9=32F6h) Load 32 bit ptr
020A:0745  FF					db	0FFh
020A:0746  E8 0070				call	sub_3			; (07B9)
020A:0749  06					push	es
020A:074A  1E					push	ds
020A:074B  50					push	ax
020A:074C  52					push	dx
020A:074D  B8 0040				mov	ax,40h
020A:0750  8E D8				mov	ds,ax
020A:0752  33 C0				xor	ax,ax			; Zero register
020A:0754  8E C0				mov	es,ax
020A:0756  FF 06 006C				inc	word ptr ds:[6Ch]	; (0040:006C=2A2Fh)
020A:075A  75 04				jnz	loc_16			; Jump if not zero
020A:075C  FF 06 006E				inc	word ptr ds:[6Eh]	; (0040:006E=0Fh)
020A:0760			loc_16:
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 4

020A:0760  83 3E 006E 18			cmp	word ptr ds:[6Eh],18h	; (0040:006E=0Fh)
020A:0765  75 15				jne	loc_17			; Jump if not equal
020A:0767  81 3E 006C 00B0			cmp	word ptr ds:[6Ch],0B0h	; (0040:006C=2A2Fh)
020A:076D  75 0D				jne	loc_17			; Jump if not equal
020A:076F  A3 006E				mov	word ptr ds:[6Eh],ax	; (0040:006E=0Fh)
020A:0772  A3 006C				mov	word ptr ds:[6Ch],ax	; (0040:006C=2A2Fh)
020A:0775  C6 06 0070 01			mov	byte ptr ds:[70h],1	; (0040:0070=0)
020A:077A  0C 08				or	al,8
020A:077C			loc_17:
020A:077C  50					push	ax
020A:077D  FE 0E 0040				dec	byte ptr ds:[40h]	; (0040:0040=0ACh)
020A:0781  75 0B				jnz	loc_18			; Jump if not zero
020A:0783  80 26 003F F0			and	byte ptr ds:[3Fh],0F0h	; (0040:003F=0)
020A:0788  B0 0C				mov	al,0Ch
020A:078A  BA 03F2				mov	dx,3F2h
020A:078D  EE					out	dx,al			; port 3F2h, dsk0 contrl output
020A:078E			loc_18:
020A:078E  58					pop	ax
020A:078F  F7 06 0314 0004			test	word ptr ds:[314h],4	; (0040:0314=3200h)
020A:0795  75 0C				jnz	loc_19			; Jump if not zero
020A:0797  9F					lahf				; Load ah from flags
020A:0798  86 E0				xchg	ah,al
020A:079A  50					push	ax
020A:079B  26: FF 1E 0070			call	dword ptr es:[70h]	; (0000:0070=6ADh)
020A:07A0  EB 03				jmp	short loc_20		; (07A5)
020A:07A2  90					nop
020A:07A3			loc_19:
020A:07A3  CD 1C				int	1Ch			; Timer break (call each 18.2ms)
020A:07A5			loc_20:
020A:07A5  E8 0011				call	sub_3			; (07B9)
020A:07A8  B0 20				mov	al,20h			; ' '
020A:07AA  E6 20				out	20h,al			; port 20h, 8259-1 int command
										;  al = 20h, end of interrupt
020A:07AC  5A					pop	dx
020A:07AD  58					pop	ax
020A:07AE  1F					pop	ds
020A:07AF  07					pop	es
020A:07B0  E9 FE99				jmp	loc_1			; (064C)
020A:07B3  C4					db	0C4h
							                        ;* No entry point to code
020A:07B4  C4 0E 93E9				les	cx,dword ptr ds:[93E9h]	; (32F6:93E9=6800h) Load 32 bit ptr
020A:07B8  FE					db	0FEh

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_3		proc	near
020A:07B9  1E					push	ds
020A:07BA  50					push	ax
020A:07BB  B8 0040				mov	ax,40h
020A:07BE  8E D8				mov	ds,ax
020A:07C0  9F					lahf				; Load ah from flags
020A:07C1  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020A:07C7  75 0C				jnz	loc_22			; Jump if not zero
020A:07C9  F0> 81 26 0314 FDFF	                           lock	and	word ptr ds:[314h],0FDFFh	; (0040:0314=3200h)
020A:07D0			loc_21:
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 5

020A:07D0  9E					sahf				; Store ah into flags
020A:07D1  58					pop	ax
020A:07D2  1F					pop	ds
020A:07D3  EB 03				jmp	short loc_23		; (07D8)
020A:07D5			loc_22:
020A:07D5  FA					cli				; Disable interrupts
020A:07D6  EB F8				jmp	short loc_21		; (07D0)
020A:07D8			loc_23:
020A:07D8  C3					retn
				sub_3		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_4		proc	near
020A:07D9  1E					push	ds
020A:07DA  50					push	ax
020A:07DB  B8 0040				mov	ax,40h
020A:07DE  8E D8				mov	ds,ax
020A:07E0  9F					lahf				; Load ah from flags
020A:07E1  F7 06 0314 0003			test	word ptr ds:[314h],3	; (0040:0314=3200h)
020A:07E7  75 14				jnz	loc_25			; Jump if not zero
020A:07E9  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020A:07EF  75 0C				jnz	loc_25			; Jump if not zero
020A:07F1  F0> 81 0E 0314 0200	                           lock	or	word ptr ds:[314h],200h	; (0040:0314=3200h)
020A:07F8			loc_24:
020A:07F8  9E					sahf				; Store ah into flags
020A:07F9  58					pop	ax
020A:07FA  1F					pop	ds
020A:07FB  EB 03				jmp	short loc_26		; (0800)
020A:07FD			loc_25:
020A:07FD  FB					sti				; Enable interrupts
020A:07FE  EB F8				jmp	short loc_24		; (07F8)
020A:0800			loc_26:
020A:0800  C3					retn
				sub_4		endp

020A:0801  00					db	0
020A:0802  0000			data_80		dw	0
020A:0804  0000			data_81		dw	0

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_5		proc	near
020A:0806  2E: FF 06 0804			inc	cs:data_81		; (020A:0804=0)
020A:080B  3D 13FF				cmp	ax,13FFh
020A:080E  75 5B				jne	loc_29			; Jump if not equal
020A:0810  83 F9 01				cmp	cx,1
020A:0813  74 40				je	loc_27			; Jump if equal
020A:0815  56					push	si
020A:0816  BE 00A4				mov	si,0A4h
020A:0819  2E: 2B 36 0802			sub	si,cs:data_80		; (020A:0802=0)
020A:081E  3B CE				cmp	cx,si
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 6

020A:0820  73 3E				jae	loc_28			; Jump if above or =
020A:0822  57					push	di
020A:0823  51					push	cx
020A:0824  52					push	dx
020A:0825  1E					push	ds
020A:0826  06					push	es
020A:0827  8C C2				mov	dx,es
020A:0829  8E DA				mov	ds,dx
020A:082B  BA B000				mov	dx,0B000h
020A:082E  8E C2				mov	es,dx
020A:0830  8B D1				mov	dx,cx
020A:0832  8B F7				mov	si,di
020A:0834  2E: 8B 3E 0802			mov	di,cs:data_80		; (020A:0802=0)
020A:0839  FC					cld				; Clear direction
020A:083A  D1 E9				shr	cx,1			; Shift w/zeros fill
020A:083C  F3/ A5				rep	movsw			; Rep when cx >0 Mov [si] to es:[di]
020A:083E  80 D1 00				adc	cl,0
020A:0841  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:0843  2E: 01 16 0802			add	cs:data_80,dx		; (020A:0802=0)
020A:0848  07					pop	es
020A:0849  1F					pop	ds
020A:084A  5A					pop	dx
020A:084B  59					pop	cx
020A:084C  5F					pop	di
020A:084D  5E					pop	si
020A:084E  F9					stc				; Set carry flag
020A:084F  2E: FF 0E 0804			dec	cs:data_81		; (020A:0804=0)
020A:0854  C3					retn
020A:0855			loc_27:
020A:0855  50					push	ax
020A:0856  B4 0E				mov	ah,0Eh
020A:0858  26: 8A 05				mov	al,es:[di]
020A:085B  E8 0012				call	sub_6			; (0870)
020A:085E  58					pop	ax
020A:085F  C3					retn
020A:0860			loc_28:
020A:0860  5E					pop	si
020A:0861  2E: FF 0E 0804			dec	cs:data_81		; (020A:0804=0)
020A:0866  C4					db	0C4h
020A:0867  C4 42 F9				les	ax,dword ptr [bp+si-7]	; Load 32 bit ptr
020A:086A  C3					retn
020A:086B			loc_29:
020A:086B  80 FC 0E				cmp	ah,0Eh
020A:086E  75 28				jne	loc_30			; Jump if not equal

				;ßßßß External Entry into Subroutine ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß

				sub_6:
020A:0870  56					push	si
020A:0871  2E: 8B 36 0802			mov	si,cs:data_80		; (020A:0802=0)
020A:0876  81 FE 00A4				cmp	si,0A4h
020A:087A  73 E4				jae	loc_28			; Jump if above or =
020A:087C  1E					push	ds
020A:087D  BE B000				mov	si,0B000h
020A:0880  8E DE				mov	ds,si
020A:0882  2E: 8B 36 0802			mov	si,cs:data_80		; (020A:0802=0)
020A:0887  88 04				mov	[si],al
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 7

020A:0889  46					inc	si
020A:088A  2E: 89 36 0802			mov	cs:data_80,si		; (020A:0802=0)
020A:088F  1F					pop	ds
020A:0890  5E					pop	si
020A:0891  F9					stc				; Set carry flag
020A:0892  2E: FF 0E 0804			dec	cs:data_81		; (020A:0804=0)
020A:0897  C3					retn
020A:0898			loc_30:
020A:0898  50					push	ax
020A:0899  B8 13FE				mov	ax,13FEh
020A:089C  C4					db	0C4h
020A:089D  C4 42 58				les	ax,dword ptr [bp+si+58h]	; Load 32 bit ptr
020A:08A0  F8					clc				; Clear carry flag
020A:08A1  2E: FF 0E 0804			dec	cs:data_81		; (020A:0804=0)
020A:08A6  C3					retn
				sub_5		endp

020A:08A7  00			data_82		db	0
020A:08A8  00			data_83		db	0
020A:08A9  2E: 80 3E 08A7 02			cmp	cs:data_82,2		; (020A:08A7=0)
020A:08AF  75 05				jne	loc_31			; Jump if not equal
020A:08B1  E8 FF52				call	sub_5			; (0806)
020A:08B4  72 5F				jc	loc_37			; Jump if carry Set
020A:08B6			loc_31:
020A:08B6  2E: 80 3E 08A7 01			cmp	cs:data_82,1		; (020A:08A7=0)
020A:08BC  74 5D				je	loc_39			; Jump if equal
020A:08BE  80 FC 00				cmp	ah,0
020A:08C1  74 30				je	loc_35			; Jump if equal
020A:08C3  80 FC 1C				cmp	ah,1Ch
020A:08C6  77 0B				ja	loc_32			; Jump if above
020A:08C8  80 FC 04				cmp	ah,4
020A:08CB  74 20				je	loc_34			; Jump if equal
020A:08CD  C4					db	0C4h
020A:08CE  C4 42 EB				les	ax,dword ptr [bp+si-15h]	; Load 32 bit ptr
020A:08D1  43					inc	bx
020A:08D2  90					nop
020A:08D3			loc_32:
020A:08D3  80 FC 4F				cmp	ah,4Fh			; 'O'
020A:08D6  75 06				jne	loc_33			; Jump if not equal
020A:08D8  C4					db	0C4h
020A:08D9  C4 BE 73EB				les	di,dword ptr [bp+73EBh]	; Load 32 bit ptr
020A:08DD  90					nop
020A:08DE			loc_33:
020A:08DE  80 FC F0				cmp	ah,0F0h
020A:08E1  72 35				jb	loc_38			; Jump if below
020A:08E3  80 FC F7				cmp	ah,0F7h
020A:08E6  76 05				jbe	loc_34			; Jump if below or =
020A:08E8  80 FC FA				cmp	ah,0FAh
020A:08EB  75 2B				jne	loc_38			; Jump if not equal
020A:08ED			loc_34:
020A:08ED  C4					db	0C4h
020A:08EE  C4 BE 23EB				les	di,dword ptr [bp+23EBh]	; Load 32 bit ptr
020A:08F2  90					nop
020A:08F3			loc_35:
020A:08F3  2E: C6 06 08A8 01			mov	cs:data_83,1		; (020A:08A8=0)
020A:08F9  C4					db	0C4h
020A:08FA  C4 BE 9090				les	di,dword ptr [bp-6F70h]	; Load 32 bit ptr
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 8

020A:08FE  50					push	ax
020A:08FF  25 007F				and	ax,7Fh
020A:0902  3C 03				cmp	al,3
020A:0904  76 08				jbe	loc_36			; Jump if below or =
020A:0906  3C 07				cmp	al,7
020A:0908  74 04				je	loc_36			; Jump if equal
020A:090A  58					pop	ax
020A:090B  EB 0E				jmp	short loc_39		; (091B)
							                        ;* No entry point to code
020A:090D  90					nop
020A:090E			loc_36:
020A:090E  58					pop	ax
020A:090F  2E: C6 06 08A8 00			mov	cs:data_83,0		; (020A:08A8=0)
020A:0915			loc_37:
020A:0915  E9 FD34				jmp	loc_1			; (064C)
020A:0918			loc_38:
020A:0918  F9					stc				; Set carry flag
020A:0919  EB FA				jmp	short loc_37		; (0915)
020A:091B			loc_39:
020A:091B  2E: C6 06 08A8 00			mov	cs:data_83,0		; (020A:08A8=0)
020A:0921  3D 13FF				cmp	ax,13FFh
020A:0924  74 2F				je	loc_43			; Jump if equal
020A:0926  80 FC F0				cmp	ah,0F0h
020A:0929  72 0D				jb	loc_40			; Jump if below
020A:092B  80 FC F7				cmp	ah,0F7h
020A:092E  76 BD				jbe	loc_34			; Jump if below or =
020A:0930  80 FC FA				cmp	ah,0FAh
020A:0933  74 B8				je	loc_34			; Jump if equal
020A:0935  EB 19				jmp	short loc_42		; (0950)
020A:0937  90					nop
020A:0938			loc_40:
020A:0938  80 FC 04				cmp	ah,4
020A:093B  74 B0				je	loc_34			; Jump if equal
020A:093D  80 FC 00				cmp	ah,0
020A:0940  75 06				jne	loc_41			; Jump if not equal
020A:0942  C4					db	0C4h
020A:0943  C4 BE 09EB				les	di,dword ptr [bp+9EBh]	; Load 32 bit ptr
020A:0947  90					nop
020A:0948			loc_41:
020A:0948  80 FC 11				cmp	ah,11h
020A:094B  75 03				jne	loc_42			; Jump if not equal
020A:094D  C4					db	0C4h
020A:094E  C4 BE 16EA				les	di,dword ptr [bp+16EAh]	; Load 32 bit ptr
020A:0952  0B 00				or	ax,[bx+si]
020A:0954  C0					db	0C0h
020A:0955			loc_43:
020A:0955  56					push	si
020A:0956  57					push	di
020A:0957  55					push	bp

020A:0958			locloop_44:
020A:0958  BA 0046				mov	dx,46h
020A:095B  52					push	dx
020A:095C  0E					push	cs
020A:095D  BB 096C				mov	bx,96Ch
020A:0960  53					push	bx
020A:0961  BB 0007				mov	bx,7
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 9

020A:0964  B4 0E				mov	ah,0Eh
020A:0966  26: 8A 05				mov	al,es:[di]
020A:0969  47					inc	di
020A:096A  EB E4		;*		jmp	short loc_42		;*(0950)
020A:096A  EB E4				db	0EBh,0E4h
							                        ;* No entry point to code
020A:096C  E2 EA				loop	locloop_44		; Loop if cx > 0

020A:096E  5D					pop	bp
020A:096F  5F					pop	di
020A:0970  5E					pop	si
020A:0971  B8 0001				mov	ax,1
020A:0974			loc_45:
020A:0974  EB 9F				jmp	short loc_37		; (0915)
							                        ;* No entry point to code
020A:0976  2E: 80 3E 08A7 02			cmp	cs:data_82,2		; (020A:08A7=0)
020A:097C  75 05				jne	loc_46			; Jump if not equal
020A:097E  E8 FE85				call	sub_5			; (0806)
020A:0981  72 F1				jc	loc_45			; Jump if carry Set
020A:0983			loc_46:
020A:0983  2E: 80 3E 08A7 01			cmp	cs:data_82,1		; (020A:08A7=0)
020A:0989  74 06				je	loc_47			; Jump if equal
020A:098B  C4					db	0C4h
020A:098C  C4 10				les	dx,dword ptr [bx+si]	; Load 32 bit ptr
020A:098E  E9 FCBB				jmp	loc_1			; (064C)
020A:0991			loc_47:
020A:0991  80 FC 13				cmp	ah,13h
020A:0994  75 04				jne	loc_48			; Jump if not equal
020A:0996  3C FF				cmp	al,0FFh
020A:0998  74 BB				je	loc_43			; Jump if equal
020A:099A			loc_48:
020A:099A  EA F000:F065		;*		jmp	far ptr loc_343		;*(F000:F065)
020A:099A  EA					db	0EAh
020A:099B  F065 F000				dw	0F065h, 0F000h
020A:099F  CD 10				int	10h			; Video display   ah=functn 00h
										;  set display mode in al
020A:09A1  C4					db	0C4h
020A:09A2  C4					db	0C4h
020A:09A3  FE C4				inc	ah
020A:09A5  C4 11				les	dx,dword ptr [bx+di]	; Load 32 bit ptr
020A:09A7  E9 FCA2				jmp	loc_1			; (064C)
020A:09AA  C4					db	0C4h
							                        ;* No entry point to code
020A:09AB  C4 12				les	dx,dword ptr [bp+si]	; Load 32 bit ptr
020A:09AD  E9 FC9C				jmp	loc_1			; (064C)
020A:09B0  C4					db	0C4h
							                        ;* No entry point to code
020A:09B1  C4 14				les	dx,dword ptr [si]	; Load 32 bit ptr
020A:09B3  E9 FC96				jmp	loc_1			; (064C)
020A:09B6  87 DB				xchg	bx,bx
020A:09B8  0000			data_85		dw	0
020A:09BA  00 00				add	[bx+si],al
020A:09BC  1D06			data_86		dw	1D06h
020A:09BE  00 00				add	[bx+si],al
020A:09C0  0032			data_87		dw	32h
020A:09C2  00 00				add	[bx+si],al
020A:09C4  1E					push	ds
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 10

020A:09C5  53					push	bx
020A:09C6  BB 0040				mov	bx,40h
020A:09C9  8E DB				mov	ds,bx
020A:09CB  80 FC 10				cmp	ah,10h
020A:09CE  E8 FDE8				call	sub_3			; (07B9)
020A:09D1  72 03				jc	loc_49			; Jump if carry Set
020A:09D3  E9 00E0				jmp	loc_63			; (0AB6)
020A:09D6			loc_49:
020A:09D6  0A E4				or	ah,ah			; Zero ?
020A:09D8  74 3E				jz	loc_54			; Jump if zero
020A:09DA  FE CC				dec	ah
020A:09DC  74 74				jz	loc_58			; Jump if zero
020A:09DE  FE CC				dec	ah
020A:09E0  74 11				jz	loc_51			; Jump if zero
020A:09E2  FE CC				dec	ah
020A:09E4  74 08				jz	loc_50			; Jump if zero
020A:09E6  FE CC				dec	ah
020A:09E8  74 04				jz	loc_50			; Jump if zero
020A:09EA  FE CC				dec	ah
020A:09EC  74 0A				jz	loc_52			; Jump if zero
020A:09EE			loc_50:
020A:09EE  5B					pop	bx
020A:09EF  1F					pop	ds
020A:09F0  E9 FC59				jmp	loc_1			; (064C)
020A:09F3			loc_51:
020A:09F3  A0 0017				mov	al,byte ptr data_9+1	; (020A:0017=0)
020A:09F6  EB F6				jmp	short loc_50		; (09EE)
020A:09F8			loc_52:
020A:09F8  56					push	si
020A:09F9  8B 1E 001C				mov	bx,word ptr data_12+2	; (020A:001C=148Fh)
020A:09FD  8B F3				mov	si,bx
020A:09FF  E8 01B9				call	sub_11			; (0BBB)
020A:0A02  3B 1E 001A				cmp	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
020A:0A06  74			data_88		db	74h			; Data table (indexed access)
020A:0A07  0B 89 890C				or	cx,word ptr ds:[890Ch][bx+di]	; (020A:890C=0CB30h)
020A:0A0B  1E					push	ds
020A:0A0C  1C			data_89		db	1Ch			; Data table (indexed access)
020A:0A0D  00			data_90		db	0
020A:0A0E  B0 00				mov	al,0
020A:0A10  5E					pop	si
020A:0A11  EB DB				jmp	short loc_50		; (09EE)
020A:0A13			loc_53:
020A:0A13  B0 01				mov	al,1
020A:0A15  5E					pop	si
020A:0A16  EB D6				jmp	short loc_50		; (09EE)
020A:0A18			loc_54:
020A:0A18  8B 1E 001A				mov	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
020A:0A1C  3B 1E 001C				cmp	bx,word ptr data_12+2	; (020A:001C=148Fh)
020A:0A20  75 13				jne	loc_56			; Jump if not equal
020A:0A22  E8 FDB4				call	sub_4			; (07D9)
020A:0A25  B8 9002				mov	ax,9002h
020A:0A28  CD 15				int	15h			; General services, ah=func 90h
										;  device busy, al=type,
										;   es:bx=ptr of request block
020A:0A2A			loc_55:
020A:0A2A  E8 FD8C				call	sub_3			; (07B9)
020A:0A2D  8B 1E 001A				mov	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 11

020A:0A31  3B 1E 001C				cmp	bx,word ptr data_12+2	; (020A:001C=148Fh)
020A:0A35			loc_56:
020A:0A35  E8 0190				call	sub_12			; (0BC8)
020A:0A38  75 05				jnz	loc_57			; Jump if not zero
020A:0A3A  E8 00E3				call	sub_7			; (0B20)
020A:0A3D  EB EB				jmp	short loc_55		; (0A2A)
020A:0A3F			loc_57:
020A:0A3F  8B 07				mov	ax,[bx]
020A:0A41  E8 0177				call	sub_11			; (0BBB)
020A:0A44  89 1E 001A				mov	word ptr ds:[1Ah],bx	; (020A:001A=0AE9Ch)
020A:0A48  E8 0129				call	sub_10			; (0B74)
020A:0A4B  72 DD				jc	loc_55			; Jump if carry Set
020A:0A4D  E8 00FC				call	sub_8			; (0B4C)
020A:0A50  EB 9C				jmp	short loc_50		; (09EE)
020A:0A52			loc_58:
020A:0A52  8B 1E 001A				mov	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
020A:0A56  3B 1E 001C				cmp	bx,word ptr data_12+2	; (020A:001C=148Fh)
020A:0A5A  8B 07				mov	ax,[bx]
020A:0A5C  E8 0169				call	sub_12			; (0BC8)
020A:0A5F  74 2F				jz	loc_60			; Jump if zero
020A:0A61  E8 00E8				call	sub_8			; (0B4C)
020A:0A64  E8 010D				call	sub_10			; (0B74)
020A:0A67  E8 FD6F				call	sub_4			; (07D9)
020A:0A6A  73 45				jnc	loc_62			; Jump if carry=0
020A:0A6C  E8 014C				call	sub_11			; (0BBB)
020A:0A6F  89 1E 001A				mov	word ptr ds:[1Ah],bx	; (020A:001A=0AE9Ch)
020A:0A73  EB DD				jmp	short loc_58		; (0A52)
020A:0A75			loc_59:
020A:0A75  8B 1E 001A				mov	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
020A:0A79  3B 1E 001C				cmp	bx,word ptr data_12+2	; (020A:001C=148Fh)
020A:0A7D  8B 07				mov	ax,[bx]
020A:0A7F  E8 0146				call	sub_12			; (0BC8)
020A:0A82  74 0C				jz	loc_60			; Jump if zero
020A:0A84  E8 00C5				call	sub_8			; (0B4C)
020A:0A87  E8 00D1				call	sub_9			; (0B5B)
020A:0A8A  E8 FD4C				call	sub_4			; (07D9)
020A:0A8D  EB 22				jmp	short loc_62		; (0AB1)
020A:0A8F  90					nop
020A:0A90			loc_60:
020A:0A90  E8 FD46				call	sub_4			; (07D9)
020A:0A93  50					push	ax
020A:0A94  9F					lahf				; Load ah from flags
020A:0A95  50					push	ax
020A:0A96  2E: A1 09B8				mov	ax,cs:data_85		; (020A:09B8=0)
020A:0A9A  2E: 3B 06 09C0			cmp	ax,cs:data_87		; (020A:09C0=32h)
020A:0A9F  72 08				jb	loc_61			; Jump if below
020A:0AA1  B4 01				mov	ah,1
020A:0AA3  C4					db	0C4h
020A:0AA4  C4 16 06EB				les	dx,dword ptr data_77+2	; (020A:06EB=52D2h) Load 32 bit ptr
020A:0AA8  90					nop
020A:0AA9			loc_61:
020A:0AA9  2E: FF 06 09BC			inc	cs:data_86		; (020A:09BC=1DD0h)
020A:0AAE  58					pop	ax
020A:0AAF  9E					sahf				; Store ah into flags
020A:0AB0  58					pop	ax
020A:0AB1			loc_62:
020A:0AB1  5B					pop	bx
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 12

020A:0AB2  1F					pop	ds
020A:0AB3  CA 0002				retf	2			; Return far
020A:0AB6			loc_63:
020A:0AB6  80 EC 10				sub	ah,10h
020A:0AB9  74 2C				jz	loc_65			; Jump if zero
020A:0ABB  FE CC				dec	ah
020A:0ABD  74 B6				jz	loc_59			; Jump if zero
020A:0ABF  FE CC				dec	ah
020A:0AC1  74 03				jz	loc_64			; Jump if zero
020A:0AC3  E9 FF28				jmp	loc_50			; (09EE)
020A:0AC6			loc_64:
020A:0AC6  A0 0018				mov	al,byte ptr data_9+2	; (020A:0018=0)
020A:0AC9  8A E0				mov	ah,al
020A:0ACB  24 04				and	al,4
020A:0ACD  51					push	cx
020A:0ACE  B1 05				mov	cl,5
020A:0AD0  D2 E0				shl	al,cl			; Shift w/zeros fill
020A:0AD2  59					pop	cx
020A:0AD3  80 E4 73				and	ah,73h			; 's'
020A:0AD6  0A C4				or	al,ah
020A:0AD8  8A 26 0096				mov	ah,byte ptr ds:[96h]	; (020A:0096=0)
020A:0ADC  80 E4 0C				and	ah,0Ch
020A:0ADF  0A E0				or	ah,al
020A:0AE1  A0 0017				mov	al,byte ptr data_9+1	; (020A:0017=0)
020A:0AE4  E9 FF07				jmp	loc_50			; (09EE)
020A:0AE7			loc_65:
020A:0AE7  8B 1E 001A				mov	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
020A:0AEB  3B 1E 001C				cmp	bx,word ptr data_12+2	; (020A:001C=148Fh)
020A:0AEF  75 13				jne	loc_67			; Jump if not equal
020A:0AF1  E8 FCE5				call	sub_4			; (07D9)
020A:0AF4  B8 9002				mov	ax,9002h
020A:0AF7  CD 15				int	15h			; General services, ah=func 90h
										;  device busy, al=type,
										;   es:bx=ptr of request block
020A:0AF9			loc_66:
020A:0AF9  E8 FCBD				call	sub_3			; (07B9)
020A:0AFC  8B 1E 001A				mov	bx,word ptr ds:[1Ah]	; (020A:001A=0AE9Ch)
020A:0B00  3B 1E 001C				cmp	bx,word ptr data_12+2	; (020A:001C=148Fh)
020A:0B04			loc_67:
020A:0B04  E8 00C1				call	sub_12			; (0BC8)
020A:0B07  75 05				jnz	loc_68			; Jump if not zero
020A:0B09  E8 0014				call	sub_7			; (0B20)
020A:0B0C  EB EB				jmp	short loc_66		; (0AF9)
020A:0B0E			loc_68:
020A:0B0E  8B 07				mov	ax,[bx]
020A:0B10  E8 00A8				call	sub_11			; (0BBB)
020A:0B13  89 1E 001A				mov	word ptr ds:[1Ah],bx	; (020A:001A=0AE9Ch)
020A:0B17  E8 0041				call	sub_9			; (0B5B)
020A:0B1A  E8 002F				call	sub_8			; (0B4C)
020A:0B1D  E9 FECE				jmp	loc_50			; (09EE)

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_7		proc	near
020A:0B20  50					push	ax
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 13

020A:0B21  E8 FCB5				call	sub_4			; (07D9)
020A:0B24  B4 02				mov	ah,2
020A:0B26  C4					db	0C4h
020A:0B27  C4 16 1E8B				les	dx,data_122		; (020A:1E8B=0) Load 32 bit ptr
020A:0B2B  1A 00				sbb	al,[bx+si]
020A:0B2D  3B 1E 001C				cmp	bx,word ptr data_12+2	; (020A:001C=148Fh)
020A:0B31  75 17				jne	loc_71			; Jump if not equal
020A:0B33  2E: A1 09B8				mov	ax,cs:data_85		; (020A:09B8=0)
020A:0B37  2E: 3B 06 09C0			cmp	ax,cs:data_87		; (020A:09C0=32h)
020A:0B3C  73 07				jae	loc_70			; Jump if above or =
020A:0B3E  2E: FF 06 09BC			inc	cs:data_86		; (020A:09BC=1E4Ah)
020A:0B43  EB E4		;*		jmp	short loc_69		;*(0B29)
020A:0B43  EB E4				db	0EBh,0E4h
020A:0B45			loc_70:
020A:0B45  B4 01				mov	ah,1
020A:0B47  C4					db	0C4h
020A:0B48  C4 16 C358				les	dx,dword ptr ds:[0C358h]	; (020A:C358=63E9h) Load 32 bit ptr

				;ßßßß External Entry into Subroutine ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß

				sub_8:
020A:0B4C  2E: C7 06 09B8 0000			mov	cs:data_85,0		; (020A:09B8=0)
020A:0B53  2E: C7 06 09BC 0000			mov	cs:data_86,0		; (020A:09BC=1E5Ah)
020A:0B5A  C3					retn
				sub_7		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_9		proc	near
020A:0B5B  53					push	bx
020A:0B5C  50					push	ax
020A:0B5D  9F					lahf				; Load ah from flags
020A:0B5E  8B D8				mov	bx,ax
020A:0B60  58					pop	ax
020A:0B61  53					push	bx
020A:0B62  3C F0				cmp	al,0F0h
020A:0B64  75 06				jne	loc_72			; Jump if not equal
020A:0B66  0A E4				or	ah,ah			; Zero ?
020A:0B68  74 02				jz	loc_72			; Jump if zero
020A:0B6A  32 C0				xor	al,al			; Zero register
020A:0B6C			loc_72:
020A:0B6C  8B D8				mov	bx,ax
020A:0B6E  58					pop	ax
020A:0B6F  9E					sahf				; Store ah into flags
020A:0B70  8B C3				mov	ax,bx
020A:0B72  5B					pop	bx
020A:0B73  C3					retn
				sub_9		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 14

				sub_10		proc	near
020A:0B74  53					push	bx
020A:0B75  50					push	ax
020A:0B76  9F					lahf				; Load ah from flags
020A:0B77  8B D8				mov	bx,ax
020A:0B79  58					pop	ax
020A:0B7A  53					push	bx
020A:0B7B  80 FC E0				cmp	ah,0E0h
020A:0B7E  75 0F				jne	loc_73			; Jump if not equal
020A:0B80  B4 1C				mov	ah,1Ch
020A:0B82  3C 0D				cmp	al,0Dh
020A:0B84  74 23				je	loc_75			; Jump if equal
020A:0B86  3C 0A				cmp	al,0Ah
020A:0B88  74 1F				je	loc_75			; Jump if equal
020A:0B8A  B4 35				mov	ah,35h			; '5'
020A:0B8C  EB 1B				jmp	short loc_75		; (0BA9)
020A:0B8E  90					nop
020A:0B8F			loc_73:
020A:0B8F  80 FC 84				cmp	ah,84h
020A:0B92  77 1E				ja	loc_76			; Jump if above
020A:0B94  3C F0				cmp	al,0F0h
020A:0B96  75 07				jne	loc_74			; Jump if not equal
020A:0B98  0A E4				or	ah,ah			; Zero ?
020A:0B9A  74 0D				jz	loc_75			; Jump if zero
020A:0B9C  EB 14				jmp	short loc_76		; (0BB2)
020A:0B9E  90					nop
020A:0B9F			loc_74:
020A:0B9F  3C E0				cmp	al,0E0h
020A:0BA1  75 06				jne	loc_75			; Jump if not equal
020A:0BA3  0A E4				or	ah,ah			; Zero ?
020A:0BA5  74 02				jz	loc_75			; Jump if zero
020A:0BA7  32 C0				xor	al,al			; Zero register
020A:0BA9			loc_75:
020A:0BA9  8B D8				mov	bx,ax
020A:0BAB  58					pop	ax
020A:0BAC  9E					sahf				; Store ah into flags
020A:0BAD  8B C3				mov	ax,bx
020A:0BAF  5B					pop	bx
020A:0BB0  F8					clc				; Clear carry flag
020A:0BB1  C3					retn
020A:0BB2			loc_76:
020A:0BB2  8B D8				mov	bx,ax
020A:0BB4  58					pop	ax
020A:0BB5  9E					sahf				; Store ah into flags
020A:0BB6  8B C3				mov	ax,bx
020A:0BB8  5B					pop	bx
020A:0BB9  F9					stc				; Set carry flag
020A:0BBA  C3					retn
				sub_10		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_11		proc	near
020A:0BBB  43					inc	bx
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 15

020A:0BBC  43					inc	bx
020A:0BBD  3B 1E 0082				cmp	bx,word ptr ds:[82h]	; (020A:0082=10h)
020A:0BC1  75 04				jne	loc_77			; Jump if not equal
020A:0BC3  8B 1E 0080				mov	bx,word ptr ds:[80h]	; (020A:0080=1850h)
020A:0BC7			loc_77:
020A:0BC7  C3					retn
				sub_11		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_12		proc	near
020A:0BC8  53					push	bx
020A:0BC9  51					push	cx
020A:0BCA  50					push	ax
020A:0BCB  9F					lahf				; Load ah from flags
020A:0BCC  50					push	ax
020A:0BCD  A0 0017				mov	al,byte ptr data_9+1	; (020A:0017=0)
020A:0BD0  24 70				and	al,70h			; 'p'
020A:0BD2  B1 04				mov	cl,4
020A:0BD4  D2 E8				shr	al,cl			; Shift w/zeros fill
020A:0BD6  24 07				and	al,7
020A:0BD8  8A 1E 0097				mov	bl,byte ptr ds:[97h]	; (020A:0097=0)
020A:0BDC  32 D8				xor	bl,al
020A:0BDE  80 E3 07				and	bl,7
020A:0BE1  74 25				jz	loc_78			; Jump if zero
020A:0BE3  F6 06 0097 40			test	byte ptr ds:[97h],40h	; (020A:0097=0) '@'
020A:0BE8  75 1E				jnz	loc_78			; Jump if not zero
020A:0BEA  80 0E 0097 40			or	byte ptr ds:[97h],40h	; (020A:0097=0) '@'
020A:0BEF  D2 E3				shl	bl,cl			; Shift w/zeros fill
020A:0BF1  0A C3				or	al,bl
020A:0BF3  B4 03				mov	ah,3
020A:0BF5  C4					db	0C4h
020A:0BF6  C4 16 2680				les	dx,dword ptr data_156	; (020A:2680=6572h) Load 32 bit ptr
020A:0BFA  97					xchg	di,ax
020A:0BFB  00 F8				add	al,bh
020A:0BFD  24 0F				and	al,0Fh
020A:0BFF  08 06 0097				or	byte ptr ds:[97h],al	; (020A:0097=0)
020A:0C03  80 26 0097 BF			and	byte ptr ds:[97h],0BFh	; (020A:0097=0)
020A:0C08			loc_78:
020A:0C08  58					pop	ax
020A:0C09  9E					sahf				; Store ah into flags
020A:0C0A  58					pop	ax
020A:0C0B  59					pop	cx
020A:0C0C  5B					pop	bx
020A:0C0D  C3					retn
				sub_12		endp

020A:0C0E  C4					db	0C4h
							                        ;* No entry point to code
020A:0C0F  C4 18				les	bx,dword ptr [bx+si]	; Load 32 bit ptr
020A:0C11  E9 FA38				jmp	loc_1			; (064C)
020A:0C14  C4					db	0C4h
							                        ;* No entry point to code
020A:0C15  C4 19				les	bx,dword ptr [bx+di]	; Load 32 bit ptr
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 16

020A:0C17  E9 FA32				jmp	loc_1			; (064C)
020A:0C1A  2A2F			data_91		dw	2A2Fh
020A:0C1C  000F			data_92		dw	0Fh
020A:0C1E  01			data_93		db	1
020A:0C1F  E8 FBB7				call	sub_4			; (07D9)
020A:0C22  80 FC 02				cmp	ah,2
020A:0C25  72 06				jb	loc_79			; Jump if below
020A:0C27  C4					db	0C4h
020A:0C28  C4 1A				les	bx,dword ptr [bp+si]	; Load 32 bit ptr
020A:0C2A  E9 FA1F				jmp	loc_1			; (064C)
020A:0C2D			loc_79:
020A:0C2D  1E					push	ds
020A:0C2E  53					push	bx
020A:0C2F  50					push	ax
020A:0C30  B8 0040				mov	ax,40h
020A:0C33  8E D8				mov	ds,ax
020A:0C35  58					pop	ax
020A:0C36  E8 FB80				call	sub_3			; (07B9)
020A:0C39  0A E4				or	ah,ah			; Zero ?
020A:0C3B  75 3F				jnz	loc_82			; Jump if not zero
020A:0C3D			loc_80:
020A:0C3D  A0 0070				mov	al,byte ptr ds:[70h]	; (0040:0070=0)
020A:0C40  8B 0E 006E				mov	cx,word ptr ds:[6Eh]	; (0040:006E=0Fh)
020A:0C44  8B 16 006C				mov	dx,word ptr ds:[6Ch]	; (0040:006C=2A2Fh)
020A:0C48  2E: 39 0E 0C1C			cmp	cs:data_92,cx		; (020A:0C1C=0Fh)
020A:0C4D  75 35				jne	loc_83			; Jump if not equal
020A:0C4F  2E: 8B 1E 0C1A			mov	bx,cs:data_91		; (020A:0C1A=2A2Fh)
020A:0C54  3B DA				cmp	bx,dx
020A:0C56  74 05				je	loc_81			; Jump if equal
020A:0C58  43					inc	bx
020A:0C59  3B DA				cmp	bx,dx
020A:0C5B  75 27				jne	loc_83			; Jump if not equal
020A:0C5D			loc_81:
020A:0C5D  2E: FE 06 0C1E			inc	cs:data_93		; (020A:0C1E=1)
020A:0C62  2E: 80 3E 0C1E 10			cmp	cs:data_93,10h		; (020A:0C1E=1)
020A:0C68  72 20				jb	loc_84			; Jump if below
020A:0C6A  E8 FB6C				call	sub_4			; (07D9)
020A:0C6D  33 C0				xor	ax,ax			; Zero register
020A:0C6F  2E: FF 0E 0C1A			dec	cs:data_91		; (020A:0C1A=2A2Fh)
020A:0C74  C4					db	0C4h
020A:0C75  C4 5A E8				les	bx,dword ptr [bp+si-18h]	; Load 32 bit ptr
020A:0C78  3F					aas				; Ascii adjust
020A:0C79  FB					sti				; Enable interrupts
020A:0C7A  EB C1				jmp	short loc_80		; (0C3D)
020A:0C7C			loc_82:
020A:0C7C  89 16 006C				mov	word ptr ds:[6Ch],dx	; (0040:006C=2A2Fh)
020A:0C80  89 0E 006E				mov	word ptr ds:[6Eh],cx	; (0040:006E=0Fh)
020A:0C84			loc_83:
020A:0C84  2E: C6 06 0C1E 00			mov	cs:data_93,0		; (020A:0C1E=1)
020A:0C8A			loc_84:
020A:0C8A  2E: 89 16 0C1A			mov	cs:data_91,dx		; (020A:0C1A=2A2Fh)
020A:0C8F  2E: 89 0E 0C1C			mov	cs:data_92,cx		; (020A:0C1C=0Fh)
020A:0C94  C6 06 0070 00			mov	byte ptr ds:[70h],0	; (0040:0070=0)
020A:0C99  5B					pop	bx
020A:0C9A  1F					pop	ds
020A:0C9B  E9 F9AE				jmp	loc_1			; (064C)
020A:0C9E  C4					db	0C4h
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 17

							                        ;* No entry point to code
020A:0C9F  C4 1E A8E9				les	bx,dword ptr ds:[0A8E9h]	; (020A:A8E9=6C6h) Load 32 bit ptr
020A:0CA3  F9					stc				; Set carry flag
020A:0CA4  C4					db	0C4h
020A:0CA5  C4 70 E9				les	si,dword ptr [bx+si-17h]	; Load 32 bit ptr
020A:0CA8  A2 E8F9				mov	byte ptr ds:[0E8F9h],al	; (020A:E8F9=7Fh)
020A:0CAB  2C FB				sub	al,0FBh
020A:0CAD  CD 4A				int	4Ah			; RTC Alarm occurred
020A:0CAF  EB 01				jmp	short $+3		; delay for I/O
020A:0CB1  90					nop
020A:0CB2  EB 01				jmp	short $+3		; delay for I/O
020A:0CB4  90					nop
020A:0CB5  EB 01				jmp	short $+3		; delay for I/O
020A:0CB7  90					nop
020A:0CB8  E8 FAFE				call	sub_3			; (07B9)
020A:0CBB  C4					db	0C4h
020A:0CBC  C4					db	0C4h
020A:0CBD  FE C4				inc	ah
020A:0CBF  C4 71 CD				les	si,dword ptr [bx+di-33h]	; Load 32 bit ptr
020A:0CC2  0A E9				or	ch,cl
020A:0CC4  86 F9				xchg	bh,cl
020A:0CC6  C4					db	0C4h
020A:0CC7			loc_85:
020A:0CC7  C4 75 CD				les	si,dword ptr [di-33h]	; Load 32 bit ptr
020A:0CCA  02 E9				add	ch,cl
020A:0CCC  7E F9				jle	loc_85			; Jump if < or =
020A:0CCE  E8 FB08				call	sub_4			; (07D9)
020A:0CD1  EB 00				jmp	short $+2		; delay for I/O
020A:0CD3  EB 00				jmp	short $+2		; delay for I/O
020A:0CD5  EB 00				jmp	short $+2		; delay for I/O
020A:0CD7  C4					db	0C4h
020A:0CD8  C4					db	0C4h
020A:0CD9  FE					db	0FEh
020A:0CDA  EB 0B				jmp	short loc_87		; (0CE7)
							                        ;* No entry point to code
020A:0CDC  3C 2F				cmp	al,2Fh			; '/'
020A:0CDE  75 06				jne	loc_86			; Jump if not equal
020A:0CE0  44					inc	sp
020A:0CE1  D9					db	0D9h
020A:0CE2  02 4E 00				add	cl,[bp]
020A:0CE5  40					inc	ax
020A:0CE6			loc_86:
020A:0CE6  F8					clc				; Clear carry flag
020A:0CE7			loc_87:
020A:0CE7  C3					retn
020A:0CE8  48					dec	ax
020A:0CE9  49					dec	cx
020A:0CEA  4D					dec	bp
020A:0CEB  45					inc	bp
020A:0CEC  4D					dec	bp
020A:0CED  20 20				and	[bx+si],ah
020A:0CEF  20 24				and	[si],ah
020A:0CF1  00 70 00		;*		add	[bx+si+0],dh
020A:0CF1  00 70 00				db	 00h, 70h, 00h
020A:0CF4  00 A0 0041				add	byte ptr ds:[41h][bx+si],ah	; (020A:0041=18h)
020A:0CF8  4C					dec	sp
020A:0CF9  00 58 4D				add	[bx+si+4Dh],bl
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 18

020A:0CFC  53					push	bx
020A:0CFD  58					pop	ax
020A:0CFE  58					pop	ax
020A:0CFF  58					pop	ax
020A:0D00  58					pop	ax
020A:0D01  30 DE				xor	dh,bl
020A:0D03  04 74				add	al,74h			; 't'
020A:0D05  00 82 FB04				add	[bp+si-4FCh],al
020A:0D09  8D 54 00				lea	dx,[si+0]		; Load effective addr
020A:0D0C  00 00				add	[bx+si],al
020A:0D0E  42					inc	dx
020A:0D0F  05 020A				add	ax,20Ah
020A:0D12  A4					movsb				; Mov [si] to es:[di]
020A:0D13  10 A7 0100				adc	byte ptr ds:[100h][bx],ah	; (020A:0100=28h)
020A:0D17  01 01				add	[bx+di],ax
020A:0D19  01 00				add	[bx+si],ax
020A:0D1B  01 00				add	[bx+si],ax
020A:0D1D  01 00				add	[bx+si],ax
020A:0D1F  01 00				add	[bx+si],ax
020A:0D21  000A[00]				db	10 dup (0)
020A:0D2B  02 01				add	al,[bx+di]
020A:0D2D  00					db	0
020A:0D2E  00 00				add	[bx+si],al
020A:0D30  00 2E 1E89				add	data_121,ch		; (020A:1E89=0)
020A:0D34  16					push	ss
020A:0D35  00 2E 068C				add	byte ptr ds:[68Ch],ch	; (020A:068C=2)
020A:0D39  18 00				sbb	[bx+si],al
020A:0D3B  CB					retf
							                        ;* No entry point to code
020A:0D3C  53					push	bx
020A:0D3D  1E					push	ds
020A:0D3E  2E: C5 1E 0016			lds	bx,dword ptr cs:[16h]	; (020A:0016=0) Load 32 bit ptr
020A:0D43  80 7F 02 10				cmp	byte ptr [bx+2],10h
020A:0D47  C7 47 03 0100			mov	word ptr [bx+3],100h
020A:0D4C  76 05				jbe	loc_88			; Jump if below or =
020A:0D4E  81 4F 03 8003			or	word ptr [bx+3],8003h
020A:0D53			loc_88:
020A:0D53  1F					pop	ds
020A:0D54  5B					pop	bx
020A:0D55  CB					retf
							                        ;* No entry point to code
020A:0D56  E8 03DB				call	sub_21			; (1134)
020A:0D59  80 FC 43				cmp	ah,43h			; 'C'
020A:0D5C  75 15				jne	loc_90			; Jump if not equal
020A:0D5E  0A C0				or	al,al			; Zero ?
020A:0D60  75 05				jnz	loc_89			; Jump if not zero
020A:0D62  B0 80				mov	al,80h
020A:0D64  E9 03F5				jmp	loc_141			; (115C)
020A:0D67			loc_89:
020A:0D67  3C 10				cmp	al,10h
020A:0D69  75 08				jne	loc_90			; Jump if not equal
020A:0D6B  0E					push	cs
020A:0D6C  07					pop	es
020A:0D6D  BB 00AF				mov	bx,0AFh
020A:0D70  E9 03E9				jmp	loc_141			; (115C)
020A:0D73			loc_90:
020A:0D73  E8 039E				call	sub_20			; (1114)
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 19

020A:0D76  2E: FF 2E 0022			jmp	dword ptr cs:[22h]	; (020A:0022=0FFh)
							                        ;* No entry point to code
020A:0D7B  12 A0 0265				adc	ah,byte ptr ds:[265h][bx+si]	; (020A:0265=0)
020A:0D7F  98					cbw				; Convrt byte to word
020A:0D80  02 B2 D402				add	dh,[bp+si-2BFEh]
020A:0D84  02 F6				add	dh,dh
020A:0D86  02 30				add	dh,[bx+si]
020A:0D88  03 99 2B03				add	bx,data_159[bx+di]	; (020A:2B03=8D1Eh)
020A:0D8C  A0 A03C				mov	al,byte ptr ds:[0A03Ch]	; (020A:A03C=0E9h)
020A:0D8F  94					xchg	sp,ax
020A:0D90  A0 A264				mov	al,byte ptr ds:[0A264h]	; (020A:A264=0C8h)
020A:0D93  CF					iret				; Interrupt return
							                        ;* No entry point to code
020A:0D94  A0 A0FF				mov	al,byte ptr ds:[0A0FFh]	; (020A:A0FF=0F7h)
020A:0D97  23 A1 A159				and	sp,word ptr ds:[0A159h][bx+di]	; (020A:A159=2EF8h)
020A:0D9B  11 A2 A216				adc	[bp+si-5DEAh],sp
020A:0D9F  EB 03				jmp	short loc_91		; (0DA4)
020A:0DA1  90					nop
020A:0DA2  90					nop
020A:0DA3  90					nop
020A:0DA4			loc_91:
020A:0DA4  51					push	cx
020A:0DA5  56					push	si
020A:0DA6  57					push	di
020A:0DA7  1E					push	ds
020A:0DA8  06					push	es
020A:0DA9  9C					pushf				; Push flags
020A:0DAA  FC					cld				; Clear direction
020A:0DAB  1E					push	ds
020A:0DAC  07					pop	es
020A:0DAD  0E					push	cs
020A:0DAE  1F					pop	ds
020A:0DAF  50					push	ax
020A:0DB0  0A E4				or	ah,ah			; Zero ?
020A:0DB2  74 31				jz	loc_94			; Jump if zero
020A:0DB4  80 FC 12				cmp	ah,12h
020A:0DB7  72 07				jb	loc_92			; Jump if below
020A:0DB9  58					pop	ax
020A:0DBA  33 C0				xor	ax,ax			; Zero register
020A:0DBC  B3 80				mov	bl,80h
020A:0DBE  EB 72				jmp	short loc_98		; (0E32)
020A:0DC0			loc_92:
020A:0DC0  9C					pushf				; Push flags
020A:0DC1  E8 0350				call	sub_20			; (1114)
020A:0DC4  83 3E 0020 00			cmp	word ptr data_14+2,0	; (020A:0020=0A3B9h)
020A:0DC9  75 05				jne	loc_93			; Jump if not equal
020A:0DCB  52					push	dx
020A:0DCC  E8 0076				call	sub_14			; (0E45)
020A:0DCF  5A					pop	dx
020A:0DD0			loc_93:
020A:0DD0  0E					push	cs
020A:0DD1  FF 16 0014				call	word ptr ds:[14h]	; (020A:0014=0E0Dh)
020A:0DD5  80 3E 002C 00			cmp	byte ptr ds:[2Ch],0	; (020A:002C=39h)
020A:0DDA  74 09				je	loc_94			; Jump if equal
020A:0DDC  58					pop	ax
020A:0DDD  33 C0				xor	ax,ax			; Zero register
020A:0DDF  B3 81				mov	bl,81h
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 20

020A:0DE1  33 D2				xor	dx,dx			; Zero register
020A:0DE3  EB			data_95		db	0EBh
020A:0DE4  4D					dec	bp
020A:0DE5			loc_94:
020A:0DE5  58					pop	ax
020A:0DE6  50					push	ax
020A:0DE7  8A C4				mov	al,ah
020A:0DE9  32 E4				xor	ah,ah			; Zero register
020A:0DEB  D1 E0				shl	ax,1			; Shift w/zeros fill
020A:0DED  8B F8				mov	di,ax
020A:0DEF  58					pop	ax
020A:0DF0  8B BD 008B				mov	di,word ptr ds:[8Bh][di]	; (020A:008B=504Fh)
020A:0DF4  0B FF				or	di,di			; Zero ?
020A:0DF6  79 38				jns	loc_97			; Jump if not sign
020A:0DF8  80 3E 002B 00			cmp	byte ptr ds:[2Bh],0	; (020A:002B=38h)
020A:0DFD  74 12				je	loc_95			; Jump if equal
020A:0DFF  56					push	si
020A:0E00  5057			data_96		dw	5057h			; Data table (indexed access)
020A:0E02  53					push	bx
020A:0E03  51					push	cx
020A:0E04  DFE8			data_98		dw	0DFE8h
020A:0E06  01 3D				add	[di],di
020A:0E08  01 00				add	[bx+si],ax
020A:0E0A  59					pop	cx
020A:0E0B  5B					pop	bx
020A:0E0C  58					pop	ax
020A:0E0D  5F					pop	di
020A:0E0E  5E					pop	si
020A:0E0F  75 17				jnz	loc_96			; Jump if not zero
020A:0E11			loc_95:
020A:0E11  0E E8 002A				callf	sub_13			; (0E3F)
020A:0E15  80 3E 002B 00			cmp	byte ptr ds:[2Bh],0	; (020A:002B=38h)
020A:0E1A  74 16				je	loc_98			; Jump if equal
020A:0E1C  50					push	ax
020A:0E1D  53					push	bx
020A:0E1E  E8 01FF				call	sub_17			; (1020)
020A:0E21  3D 0001				cmp	ax,1
020A:0E24  5B					pop	bx
020A:0E25  58					pop	ax
020A:0E26  74 0A				jz	loc_98			; Jump if zero
020A:0E28			loc_96:
020A:0E28  33 C0				xor	ax,ax			; Zero register
020A:0E2A  33 D2				xor	dx,dx			; Zero register
020A:0E2C  B3 82				mov	bl,82h
020A:0E2E  EB 02				jmp	short loc_98		; (0E32)
020A:0E30			loc_97:
020A:0E30  FF D7				call	di			;*
020A:0E32			loc_98:
020A:0E32  0E					push	cs
020A:0E33  FF 16 0014				call	word ptr ds:[14h]	; (020A:0014=0E0Dh)
020A:0E37  07					pop	es
020A:0E38  1F					pop	ds
020A:0E39  5F					pop	di
020A:0E3A  5E					pop	si
020A:0E3B  59					pop	cx
020A:0E3C  CB					retf				; Return far
020A:0E3D  6E					db	6Eh
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 21

020A:0E3E  FB					sti				; Enable interrupts

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_13		proc	near
020A:0E3F  FF 36 014D				push	word ptr ds:[14Dh]	; (020A:014D=5582h)
020A:0E43  57					push	di
020A:0E44  CB					retf				; Return far
				sub_13		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_14		proc	near
020A:0E45  06					push	es
020A:0E46  E8 0071				call	sub_15			; (0EBA)
020A:0E49  80 3E 002C 00			cmp	byte ptr ds:[2Ch],0	; (020A:002C=39h)
020A:0E4E  74 02				je	loc_99			; Jump if equal
020A:0E50  07					pop	es
020A:0E51  C3					retn
020A:0E52			loc_99:
020A:0E52  B8 020D				mov	ax,20Dh
020A:0E55  C4					db	0C4h
020A:0E56  C4 52 09				les	dx,dword ptr [bp+si+9]	; Load 32 bit ptr
020A:0E59  C4 36 001A				les	si,dword ptr ds:[1Ah]	; (020A:001A=0AE9Ch) Load 32 bit ptr
020A:0E5D  26: 87 04				xchg	es:[si],ax
020A:0E60  A3 001E				mov	word ptr ds:[1Eh],ax	; (020A:001E=961Fh)
020A:0E63  8C C8				mov	ax,cs
020A:0E65  26: 87 44 02				xchg	es:[si+2],ax
020A:0E69  A3 0020				mov	word ptr data_14+2,ax	; (020A:0020=0A3B9h)
020A:0E6C  8B C1				mov	ax,cx
020A:0E6E  3D 3C00				cmp	ax,3C00h
020A:0E71  72 03				jb	loc_100			; Jump if below
020A:0E73  B8 3C00				mov	ax,3C00h
020A:0E76			loc_100:
020A:0E76  2B 06 0037				sub	ax,word ptr ds:[37h]	; (020A:0037=0)
020A:0E7A  3D 0040				cmp	ax,40h
020A:0E7D  72 0C				jb	loc_101			; Jump if below
020A:0E7F  83 3E 0035 00			cmp	word ptr ds:[35h],0	; (020A:0035=80Fh)
020A:0E84  75 05				jne	loc_101			; Jump if not equal
020A:0E86  C6 06 0029 01			mov	byte ptr ds:[29h],1	; (020A:0029=14h)
020A:0E8B			loc_101:
020A:0E8B  0B C0				or	ax,ax			; Zero ?
020A:0E8D  74 20				jz	loc_104			; Jump if zero
020A:0E8F  B9 0400				mov	cx,400h
020A:0E92  33 DB				xor	bx,bx			; Zero register
020A:0E94  80 3E 0029 00			cmp	byte ptr ds:[29h],0	; (020A:0029=14h)
020A:0E99  74 03				je	loc_102			; Jump if equal
020A:0E9B  BB 0040				mov	bx,40h
020A:0E9E			loc_102:
020A:0E9E  3B 1E 0035				cmp	bx,word ptr ds:[35h]	; (020A:0035=80Fh)
020A:0EA2  73 04				jae	loc_103			; Jump if above or =
020A:0EA4  8B 1E 0035				mov	bx,word ptr ds:[35h]	; (020A:0035=80Fh)
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 22

020A:0EA8			loc_103:
020A:0EA8  03 CB				add	cx,bx
020A:0EAA  2B C3				sub	ax,bx
020A:0EAC  E8 01E2				call	sub_19			; (1091)
020A:0EAF			loc_104:
020A:0EAF  07					pop	es
020A:0EB0  C3					retn
				sub_14		endp

							                        ;* No entry point to code
020A:0EB1  13 00				adc	ax,[bx+si]
020A:0EB3  FF					db	0FFh
020A:0EB4  FF 56 44				call	word ptr [bp+44h]	;*
020A:0EB7  49					dec	cx
020A:0EB8  53					push	bx
020A:0EB9  4B					dec	bx

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_15		proc	near
020A:0EBA  06					push	es
020A:0EBB  33 C0				xor	ax,ax			; Zero register
020A:0EBD  8E C0				mov	es,ax
020A:0EBF  26: 8E 06 0066			mov	es,word ptr es:[66h]	; (0000:0066=20Ah)
020A:0EC4  BF 0012				mov	di,12h
020A:0EC7  BE 01C5				mov	si,1C5h
020A:0ECA  B9 0005				mov	cx,5
020A:0ECD  FC					cld				; Clear direction
020A:0ECE  F3/ A6				repe	cmpsb			; Rep zf=1+cx >0 Cmp [si] to es:[di]
020A:0ED0  07					pop	es
020A:0ED1  74 24				jz	loc_105			; Jump if zero
020A:0ED3  E8 0110				call	sub_16			; (0FE6)
020A:0ED6  06					push	es
020A:0ED7  2E: C4 3E 01C1			les	di,dword ptr cs:[1C1h]	; (020A:01C1=0) Load 32 bit ptr
020A:0EDC  BE 01C5				mov	si,1C5h
020A:0EDF  B9 0005				mov	cx,5
020A:0EE2  FC					cld				; Clear direction
020A:0EE3  F3/ A6				repe	cmpsb			; Rep zf=1+cx >0 Cmp [si] to es:[di]
020A:0EE5  07					pop	es
020A:0EE6  9C					pushf				; Push flags
020A:0EE7  E8 0136				call	sub_17			; (1020)
020A:0EEA  0E					push	cs
020A:0EEB  FF 16 0014				call	word ptr ds:[14h]	; (020A:0014=0E0Dh)
020A:0EEF  74 06				jz	loc_105			; Jump if zero
020A:0EF1  C6 06 002C 00			mov	byte ptr ds:[2Ch],0	; (020A:002C=39h)
020A:0EF6  C3					retn
020A:0EF7			loc_105:
020A:0EF7  C6 06 002C 01			mov	byte ptr ds:[2Ch],1	; (020A:002C=39h)
020A:0EFC  C3					retn
				sub_15		endp

							                        ;* No entry point to code
020A:0EFD  80 FC 88				cmp	ah,88h
020A:0F00  74 0A				je	loc_106			; Jump if equal
020A:0F02  80 FC 87				cmp	ah,87h
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 23

020A:0F05  74 0C				je	loc_107			; Jump if equal
020A:0F07  2E: FF 2E 001E			jmp	dword ptr cs:[1Eh]	; (020A:001E=961Fh)
020A:0F0C			loc_106:
020A:0F0C  2E: A1 0035				mov	ax,word ptr cs:[35h]	; (020A:0035=80Fh)
020A:0F10  E9 0249				jmp	loc_141			; (115C)
020A:0F13			loc_107:
020A:0F13  E8 01FE				call	sub_20			; (1114)
020A:0F16  83 EC 04				sub	sp,4
020A:0F19  60					db	60h
020A:0F1A  E8 016C				call	sub_18			; (1089)
020A:0F1D  8B EC				mov	bp,sp
020A:0F1F  89 46 12				mov	[bp+12h],ax
020A:0F22  8B 46 18				mov	ax,[bp+18h]
020A:0F25  89 46 10				mov	[bp+10h],ax
020A:0F28  61					db	61h
020A:0F29  2E: FF 1E 001E			call	dword ptr cs:[1Eh]	; (020A:001E=961Fh)
020A:0F2E  50					push	ax
020A:0F2F  9C					pushf				; Push flags
020A:0F30  55					push	bp
020A:0F31  8B EC				mov	bp,sp
020A:0F33  8B 46 02				mov	ax,[bp+2]
020A:0F36  89 46 0C				mov	[bp+0Ch],ax
020A:0F39  83 7E 06 00				cmp	word ptr [bp+6],0
020A:0F3D  5D					pop	bp
020A:0F3E  58					pop	ax
020A:0F3F  58					pop	ax
020A:0F40  74 0B				jz	loc_108			; Jump if zero
020A:0F42  E8 01CF				call	sub_20			; (1114)
020A:0F45  60					db	60h
020A:0F46  B8 0001				mov	ax,1
020A:0F49  E8 0272				call	sub_22			; (11BE)
020A:0F4C  61					db	61h
020A:0F4D			loc_108:
020A:0F4D  83 C4 02				add	sp,2
020A:0F50  E9 0209				jmp	loc_141			; (115C)
							                        ;* No entry point to code
020A:0F53  00 00				add	[bx+si],al
020A:0F55  E8 01BC				call	sub_20			; (1114)
020A:0F58  B3 91				mov	bl,91h
020A:0F5A  3C 40				cmp	al,40h			; '@'
020A:0F5C  75 06				jne	loc_109			; Jump if not equal
020A:0F5E  3B 16 0263				cmp	dx,word ptr ds:[263h]	; (020A:0263=0)
020A:0F62  74 21				je	loc_110			; Jump if equal
020A:0F64			loc_109:
020A:0F64  80 3E 0026 01			cmp	byte ptr ds:[26h],1	; (020A:0026=3)
020A:0F69  74 1A				je	loc_110			; Jump if equal
020A:0F6B  B3 90				mov	bl,90h
020A:0F6D  80 3E 0029 00			cmp	byte ptr ds:[29h],0	; (020A:0029=14h)
020A:0F72  74 11				je	loc_110			; Jump if equal
020A:0F74  B3 92				mov	bl,92h
020A:0F76  3B 16 0033				cmp	dx,word ptr ds:[33h]	; (020A:0033=0Ch)
020A:0F7A  72 09				jb	loc_110			; Jump if below
020A:0F7C  B8 0001				mov	ax,1
020A:0F7F  A2 0026				mov	byte ptr ds:[26h],al	; (020A:0026=3)
020A:0F82  32 DB				xor	bl,bl			; Zero register
020A:0F84  C3					retn
020A:0F85			loc_110:
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 24

020A:0F85  33 C0				xor	ax,ax			; Zero register
020A:0F87  C3					retn
							                        ;* No entry point to code
020A:0F88  E8 0189				call	sub_20			; (1114)
020A:0F8B  A0 0026				mov	al,byte ptr ds:[26h]	; (020A:0026=3)
020A:0F8E  0A C0				or	al,al			; Zero ?
020A:0F90  74 0B				jz	loc_111			; Jump if zero
020A:0F92  C6 06 0026 00			mov	byte ptr ds:[26h],0	; (020A:0026=3)
020A:0F97  B8 0001				mov	ax,1
020A:0F9A  32 DB				xor	bl,bl			; Zero register
020A:0F9C  C3					retn
020A:0F9D			loc_111:
020A:0F9D  33 C0				xor	ax,ax			; Zero register
020A:0F9F  B3 93				mov	bl,93h
020A:0FA1  C3					retn
							                        ;* No entry point to code
020A:0FA2  E8 016F				call	sub_20			; (1114)
020A:0FA5  83 3E 0031 01			cmp	word ptr ds:[31h],1	; (020A:0031=3F3Eh)
020A:0FAA  74 0D				je	loc_112			; Jump if equal
020A:0FAC  E8 0037				call	sub_16			; (0FE6)
020A:0FAF  0B C0				or	ax,ax			; Zero ?
020A:0FB1  74 0C				jz	loc_113			; Jump if zero
020A:0FB3  C7 06 0031 0001			mov	word ptr ds:[31h],1	; (020A:0031=3F3Eh)
020A:0FB9			loc_112:
020A:0FB9  B8 0001				mov	ax,1
020A:0FBC  32 DB				xor	bl,bl			; Zero register
020A:0FBE  C3					retn
020A:0FBF			loc_113:
020A:0FBF  B3 82				mov	bl,82h
020A:0FC1  33 C0				xor	ax,ax			; Zero register
020A:0FC3  C3					retn
							                        ;* No entry point to code
020A:0FC4  E8 014D				call	sub_20			; (1114)
020A:0FC7  83 3E 0031 00			cmp	word ptr ds:[31h],0	; (020A:0031=3F3Eh)
020A:0FCC  74 0D				je	loc_114			; Jump if equal
020A:0FCE  E8 004F				call	sub_17			; (1020)
020A:0FD1  0B C0				or	ax,ax			; Zero ?
020A:0FD3  74 0C				jz	loc_115			; Jump if zero
020A:0FD5  C7 06 0031 0000			mov	word ptr ds:[31h],0	; (020A:0031=3F3Eh)
020A:0FDB			loc_114:
020A:0FDB  B8 0001				mov	ax,1
020A:0FDE  32 DB				xor	bl,bl			; Zero register
020A:0FE0  C3					retn
020A:0FE1			loc_115:
020A:0FE1  B3 82				mov	bl,82h
020A:0FE3  33			data_100	db	33h
020A:0FE4  C0					db	0C0h
020A:0FE5  C3					retn

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_16		proc	near
020A:0FE6  E8 012B				call	sub_20			; (1114)
020A:0FE9  80 3E 0027 01			cmp	byte ptr ds:[27h],1	; (020A:0027=4)
020A:0FEE  75 25				jne	loc_119			; Jump if not equal
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 25

020A:0FF0  C6 06 003B 03			mov	byte ptr ds:[3Bh],3	; (020A:003B=0)
020A:0FF5  83 3E 002F 00			cmp	word ptr ds:[2Fh],0	; (020A:002F=3D3Ch)
020A:0FFA  74 07				je	loc_117			; Jump if equal
020A:0FFC			loc_116:
020A:0FFC  E8 008A				call	sub_18			; (1089)
020A:0FFF  0B C0				or	ax,ax			; Zero ?
020A:1001  75 0E				jnz	loc_118			; Jump if not zero
020A:1003			loc_117:
020A:1003  B8 0001				mov	ax,1
020A:1006  E8 01B5				call	sub_22			; (11BE)
020A:1009  FE 0E 003B				dec	byte ptr ds:[3Bh]	; (020A:003B=0)
020A:100D  75 ED				jnz	loc_116			; Jump if not zero
020A:100F  EB 0A				jmp	short loc_120		; (101B)
020A:1011			loc_118:
020A:1011  FF 06 002F				inc	word ptr ds:[2Fh]	; (020A:002F=3D3Ch)
020A:1015			loc_119:
020A:1015  B8 0001				mov	ax,1
020A:1018  32 DB				xor	bl,bl			; Zero register
020A:101A  C3					retn
020A:101B			loc_120:
020A:101B  B3 82				mov	bl,82h
020A:101D  33 C0				xor	ax,ax			; Zero register
020A:101F  C3					retn
				sub_16		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_17		proc	near
020A:1020  E8 00F1				call	sub_20			; (1114)
020A:1023  80 3E 0027 00			cmp	byte ptr ds:[27h],0	; (020A:0027=4)
020A:1028  74 34				je	loc_125			; Jump if equal
020A:102A  83 3E 002F 00			cmp	word ptr ds:[2Fh],0	; (020A:002F=3D3Ch)
020A:102F  74 33				je	loc_126			; Jump if equal
020A:1031  C6 06 003B 03			mov	byte ptr ds:[3Bh],3	; (020A:003B=0)
020A:1036			loc_121:
020A:1036  E8 0050				call	sub_18			; (1089)
020A:1039  83 3E 002F 01			cmp	word ptr ds:[2Fh],1	; (020A:002F=3D3Ch)
020A:103E  75 08				jne	loc_122			; Jump if not equal
020A:1040  0B C0				or	ax,ax			; Zero ?
020A:1042  74 16				jz	loc_124			; Jump if zero
020A:1044  33 C0				xor	ax,ax			; Zero register
020A:1046  EB 07				jmp	short loc_123		; (104F)
020A:1048			loc_122:
020A:1048  0B C0				or	ax,ax			; Zero ?
020A:104A  75 0E				jnz	loc_124			; Jump if not zero
020A:104C  B8 0001				mov	ax,1
020A:104F			loc_123:
020A:104F  E8 016C				call	sub_22			; (11BE)
020A:1052  FE 0E 003B				dec	byte ptr ds:[3Bh]	; (020A:003B=0)
020A:1056  75 DE				jnz	loc_121			; Jump if not zero
020A:1058  EB 0A				jmp	short loc_126		; (1064)
020A:105A			loc_124:
020A:105A  FF 0E 002F				dec	word ptr ds:[2Fh]	; (020A:002F=3D3Ch)
020A:105E			loc_125:
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 26

020A:105E  B8 0001				mov	ax,1
020A:1061  32 DB				xor	bl,bl			; Zero register
020A:1063  C3					retn
020A:1064			loc_126:
020A:1064  B3 82				mov	bl,82h
020A:1066  33 C0				xor	ax,ax			; Zero register
020A:1068  C3					retn
				sub_17		endp

							                        ;* No entry point to code
020A:1069  2E: 80 3E 002B 00			cmp	byte ptr cs:[2Bh],0	; (020A:002B=38h)
020A:106F  74 04				je	loc_127			; Jump if equal
020A:1071  B8 0001				mov	ax,1
020A:1074  CB					retf				; Return far
020A:1075			loc_127:
020A:1075  E8 FF6E				call	sub_16			; (0FE6)
020A:1078  CB					retf
							                        ;* No entry point to code
020A:1079  2E: 80 3E 002B 00			cmp	byte ptr cs:[2Bh],0	; (020A:002B=38h)
020A:107F  74 04				je	loc_128			; Jump if equal
020A:1081  B8 0001				mov	ax,1
020A:1084  CB					retf				; Return far
020A:1085			loc_128:
020A:1085  E8 FF98				call	sub_17			; (1020)
020A:1088  CB					retf				; Return far

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_18		proc	near
020A:1089  2E: A0 003C				mov	al,byte ptr cs:[3Ch]	; (020A:003C=10h)
020A:108D  98					cbw				; Convrt byte to word
020A:108E  32 DB				xor	bl,bl			; Zero register
020A:1090  C3					retn
				sub_18		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_19		proc	near
020A:1091  8B D0				mov	dx,ax
020A:1093  8B F1				mov	si,cx
020A:1095  33 FF				xor	di,di			; Zero register
020A:1097  06					push	es
020A:1098  8E 06 014D				mov	es,word ptr ds:[14Dh]	; (020A:014D=5582h)
020A:109C  26: 8B 1E A004			mov	bx,word ptr es:[0A004h]	; (5582:A004=0FFFFh)
020A:10A1  26: 8B 0E A008			mov	cx,word ptr es:[0A008h]	; (5582:A008=0FFFFh)

020A:10A6			locloop_129:
020A:10A6  26: 80 3F 04				cmp	byte ptr es:[bx],4
020A:10AA  75 08				jne	loc_130			; Jump if not equal
020A:10AC  0B FF				or	di,di			; Zero ?
020A:10AE  75 48				jnz	loc_133			; Jump if not zero
020A:10B0  8B FB				mov	di,bx
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 27

020A:10B2  EB 44				jmp	short loc_133		; (10F8)
020A:10B4			loc_130:
020A:10B4  26: 80 3F 01				cmp	byte ptr es:[bx],1
020A:10B8  75 3E				jne	loc_133			; Jump if not equal
020A:10BA  26: 8B 47 02				mov	ax,es:[bx+2]
020A:10BE  26: 03 47 04				add	ax,es:[bx+4]
020A:10C2  3B C6				cmp	ax,si
020A:10C4  72 32				jb	loc_133			; Jump if below
020A:10C6  8B C6				mov	ax,si
020A:10C8  03 C2				add	ax,dx
020A:10CA  26: 3B 47 02				cmp	ax,es:[bx+2]
020A:10CE  72 28				jb	loc_133			; Jump if below
020A:10D0  26: 3B 77 02				cmp	si,es:[bx+2]
020A:10D4  76 08				jbe	loc_131			; Jump if below or =
020A:10D6  03 D6				add	dx,si
020A:10D8  26: 8B 77 02				mov	si,es:[bx+2]
020A:10DC  2B D6				sub	dx,si
020A:10DE			loc_131:
020A:10DE  26: 8B 47 02				mov	ax,es:[bx+2]
020A:10E2  26: 03 47 04				add	ax,es:[bx+4]
020A:10E6  2B C2				sub	ax,dx
020A:10E8  2B C6				sub	ax,si
020A:10EA  76 02				jbe	loc_132			; Jump if below or =
020A:10EC  03 D0				add	dx,ax
020A:10EE			loc_132:
020A:10EE  26: C6 07 04				mov	byte ptr es:[bx],4
020A:10F2  0B FF				or	di,di			; Zero ?
020A:10F4  75 02				jnz	loc_133			; Jump if not zero
020A:10F6  8B FB				mov	di,bx
020A:10F8			loc_133:
020A:10F8  83 C3 06				add	bx,6
020A:10FB  E2 A9				loop	locloop_129		; Loop if cx > 0

020A:10FD  0B FF				or	di,di			; Zero ?
020A:10FF  74 11				jz	loc_134			; Jump if zero
020A:1101  26: C6 45 01 00			mov	byte ptr es:[di+1],0
020A:1106  26: C6 05 01				mov	byte ptr es:[di],1
020A:110A  26: 89 75 02				mov	es:[di+2],si
020A:110E  26: 89 55 04				mov	es:[di+4],dx
020A:1112			loc_134:
020A:1112  07					pop	es
020A:1113  C3					retn
				sub_19		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_20		proc	near
020A:1114  1E					push	ds
020A:1115  50					push	ax
020A:1116  B8 0040				mov	ax,40h
020A:1119  8E D8				mov	ds,ax
020A:111B  9F					lahf				; Load ah from flags
020A:111C  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020A:1122  75 0C				jnz	loc_136			; Jump if not zero
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 28

020A:1124  F0> 81 26 0314 FDFF	                           lock	and	word ptr ds:[314h],0FDFFh	; (0040:0314=3200h)
020A:112B			loc_135:
020A:112B  9E					sahf				; Store ah into flags
020A:112C  58					pop	ax
020A:112D  1F					pop	ds
020A:112E  EB 03				jmp	short loc_137		; (1133)
020A:1130			loc_136:
020A:1130  FA					cli				; Disable interrupts
020A:1131  EB F8				jmp	short loc_135		; (112B)
020A:1133			loc_137:
020A:1133  C3					retn
				sub_20		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_21		proc	near
020A:1134  1E					push	ds
020A:1135  50					push	ax
020A:1136  B8 0040				mov	ax,40h
020A:1139  8E D8				mov	ds,ax
020A:113B  9F					lahf				; Load ah from flags
020A:113C  F7 06 0314 0003			test	word ptr ds:[314h],3	; (0040:0314=3200h)
020A:1142  75 14				jnz	loc_139			; Jump if not zero
020A:1144  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020A:114A  75 0C				jnz	loc_139			; Jump if not zero
020A:114C  F0> 81 0E 0314 0200	                           lock	or	word ptr ds:[314h],200h	; (0040:0314=3200h)
020A:1153			loc_138:
020A:1153  9E					sahf				; Store ah into flags
020A:1154  58					pop	ax
020A:1155  1F					pop	ds
020A:1156  EB 03				jmp	short loc_140		; (115B)
020A:1158			loc_139:
020A:1158  FB					sti				; Enable interrupts
020A:1159  EB F8				jmp	short loc_138		; (1153)
020A:115B			loc_140:
020A:115B  C3					retn
				sub_21		endp

020A:115C			loc_141:
020A:115C  1E					push	ds
020A:115D  50					push	ax
020A:115E  B8 0040				mov	ax,40h
020A:1161  8E D8				mov	ds,ax
020A:1163  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020A:1169  75 4F				jnz	loc_149			; Jump if not zero
020A:116B  55					push	bp
020A:116C  8B EC				mov	bp,sp
020A:116E  8B 46 0A				mov	ax,[bp+0Ah]
020A:1171  5D					pop	bp
020A:1172  A9 0100				test	ax,100h
020A:1175  75 43				jnz	loc_149			; Jump if not zero
020A:1177  A9 0200				test	ax,200h
020A:117A  74 22				jz	loc_145			; Jump if zero
020A:117C  F0> 81 0E 0314 0200	                           lock	or	word ptr ds:[314h],200h	; (0040:0314=3200h)
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 29

020A:1183  F7 06 0314 0003			test	word ptr ds:[314h],3	; (0040:0314=3200h)
020A:1189  75 2F				jnz	loc_149			; Jump if not zero
020A:118B			loc_142:
020A:118B  86 E0				xchg	ah,al
020A:118D  FC					cld				; Clear direction
020A:118E  A8 04				test	al,4
020A:1190  75 25				jnz	loc_148			; Jump if not zero
020A:1192			loc_143:
020A:1192  A8 08				test	al,8
020A:1194  75 11				jnz	loc_146			; Jump if not zero
020A:1196  70 19				jo	loc_147			; Jump if overflow=1
020A:1198			loc_144:
020A:1198  9E					sahf				; Store ah into flags
020A:1199  58					pop	ax
020A:119A  1F					pop	ds
020A:119B  CA 0002				retf	2			; Return far
020A:119E			loc_145:
020A:119E  F0> 81 26 0314 FDFF	                           lock	and	word ptr ds:[314h],0FDFFh	; (020A:0314=3231h)
020A:11A5  EB E4				jmp	short loc_142		; (118B)
020A:11A7			loc_146:
020A:11A7  70 EF				jo	loc_144			; Jump if overflow=1
020A:11A9  50					push	ax
020A:11AA  B0 7F				mov	al,7Fh
020A:11AC  04 02				add	al,2
020A:11AE  58					pop	ax
020A:11AF  EB E7				jmp	short loc_144		; (1198)
020A:11B1			loc_147:
020A:11B1  50					push	ax
020A:11B2  32 C0				xor	al,al			; Zero register
020A:11B4  58					pop	ax
020A:11B5  EB E1				jmp	short loc_144		; (1198)
020A:11B7			loc_148:
020A:11B7  FD					std				; Set direction flag
020A:11B8  EB D8				jmp	short loc_143		; (1192)
020A:11BA			loc_149:
020A:11BA  58					pop	ax
020A:11BB  1F					pop	ds
020A:11BC  CF					iret				; Interrupt return
020A:11BD  00 3D				add	[di],bh
020A:11BF  02 00				add	al,[bx+si]
020A:11C1  75 06				jnz	loc_150			; Jump if not zero
020A:11C3  2E: A0 003C				mov	al,byte ptr cs:[3Ch]	; (020A:003C=10h)
020A:11C7  98					cbw				; Convrt byte to word
020A:11C8  C3					retn
020A:11C9			loc_150:
020A:11C9  C4					db	0C4h
020A:11CA  C4 52 00		;*		les	dx,dword ptr [bp+si+0]	; Load 32 bit ptr
020A:11CA  C4 52 00				db	0C4h, 52h, 00h
020A:11CD  C3					retn
							                        ;* No entry point to code
020A:11CE  2E: C6 46 28 03			mov	byte ptr cs:[bp+28h],3
020A:11D3  49					dec	cx
020A:11D4  00 00				add	[bx+si],al
020A:11D6  0D 002F				or	ax,2Fh
020A:11D9  00 06 0600				add	byte ptr ds:[600h],al	; (020A:0600=2)
020A:11DD  00 0F				add	[bx],cl
020A:11DF  61					db	61h
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 30

020A:11E0  FF					db	0FFh
020A:11E1  FF 06 2300				inc	data_150		; (020A:2300=0)
020A:11E5  0485[00]				db	1157 dup (0)
020A:166A  0C 00				or	al,0
020A:166C  82 01 54				add	byte ptr [bx+di],54h	; 'T'
020A:166F  03 58 72				add	bx,[bx+si+72h]
020A:1672  03 09				add	cx,[bx+di]
020A:1674  00 19				add	[bx+di],bl
020A:1676  00 00				add	[bx+si],al
020A:1678  0C 00				or	al,0
020A:167A  82 01 52				add	byte ptr [bx+di],52h	; 'R'
020A:167D  03 00				add	ax,[bx+si]
020A:167F  00 FF				add	bh,bh
020A:1681  FF					db	0FFh
020A:1682  D9					db	0D9h
020A:1683  19 04				sbb	[si],ax
020A:1685  00 00				add	[bx+si],al
020A:1687  00 41 41				add	[bx+di+41h],al
020A:168A  000F[41]				db	15 dup (41h)
020A:1699  00					db	0
020A:169A  00 00				add	[bx+si],al
020A:169C  00 41 41				add	[bx+di+41h],al
020A:169F  0008[41]				db	8 dup (41h)
020A:16A7  00 00				add	[bx+si],al
020A:16A9  0011[41]				db	17 dup (41h)
020A:16BA  00					db	0
020A:16BB  00 00				add	[bx+si],al
020A:16BD  00 41 41				add	[bx+di+41h],al
020A:16C0  0008[41]				db	8 dup (41h)
020A:16C8  00 00				add	[bx+si],al
020A:16CA  0011[41]				db	17 dup (41h)
020A:16DB  00					db	0
020A:16DC  00 00				add	[bx+si],al
020A:16DE  00 41 41				add	[bx+di+41h],al
020A:16E1  0008[41]				db	8 dup (41h)
020A:16E9  00 00				add	[bx+si],al
020A:16EB  0011[41]				db	17 dup (41h)
020A:16FC  00					db	0
020A:16FD  00 00				add	[bx+si],al
020A:16FF  00 41 41				add	[bx+di+41h],al
020A:1702  0008[41]				db	8 dup (41h)
020A:170A  00					db	0
020A:170B  00 00				add	[bx+si],al
020A:170D  00 95 4C1C				add	byte ptr ds:[4C1Ch][di],dl	; (020A:4C1C=0)
020A:1711  7C 03				jl	loc_151			; Jump if <
020A:1713  12 00				adc	al,[bx+si]
020A:1715  00 52 03				add	[bp+si+3],dl
020A:1718  00					db	0
020A:1719  00 00				add	[bx+si],al
020A:171B  00 C7				add	bh,al
020A:171D  1C 00				sbb	al,0
020A:171F  00 41 3A				add	[bx+di+3Ah],al
020A:1722  5C					pop	sp
020A:1723  0041[00]				db	65 dup (0)
020A:1764  58					pop	ax
020A:1765  02 00				add	al,[bx+si]
020A:1767  42					inc	dx
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 31

020A:1768  3A 5C 00		;*		cmp	bl,[si+0]
020A:1768  3A 5C 00				db	 3Ah, 5Ch, 00h
020A:176B  0040[00]				db	64 dup (0)
020A:17AB  58					pop	ax
020A:17AC  02 00				add	al,[bx+si]
020A:17AE  43					inc	bx
020A:17AF  3A 5C 00		;*		cmp	bl,[si+0]
020A:17AF  3A 5C 00				db	 3Ah, 5Ch, 00h
020A:17B2  0040[00]				db	64 dup (0)
020A:17F2  54					push	sp
020A:17F3  02 00				add	al,[bx+si]
020A:17F5  44					inc	sp
020A:17F6  3A 5C 00		;*		cmp	bl,[si+0]
020A:17F6  3A 5C 00				db	 3Ah, 5Ch, 00h
020A:17F9  0040[00]				db	64 dup (0)
020A:1839  5C					pop	sp
020A:183A  02 00				add	al,[bx+si]
020A:183C  B5 01				mov	ch,1
020A:183E  00 00				add	[bx+si],al
020A:1840  53					push	bx
020A:1841  8F 03				pop	word ptr [bp+di]
020A:1843  7E 00				jle	$+2			; delay for I/O
020A:1845  00 0C				add	[si],cl
020A:1847  00 58 00		;*		add	[bx+si+0],bl
020A:1847  00 58 00				db	 00h, 58h, 00h
020A:184A  AA					stosb				; Store al to es:[di]
020A:184B  03 00				add	ax,[bx+si]
020A:184D  00					db	0
020A:184E  00					db	0
020A:184F  00 00				add	[bx+si],al
020A:1851  00 09				add	[bx+di],cl
020A:1853  00 48 00		;*		add	[bx+si+0],cl
020A:1853  00 48 00				db	 00h, 48h, 00h
020A:1856  80 00 00				add	byte ptr [bx+si],0
020A:1859  00 C0				add	al,al
020A:185B  03 00				add	ax,[bx+si]
020A:185D  00 40 00		;*		add	[bx+si+0],al
020A:185D  00 40 00				db	 00h, 40h, 00h
020A:1860  40					inc	ax
020A:1861  00 C3				add	bl,al
020A:1863  E2 00				loop	locloop_152		; Loop if cx > 0


020A:1865			locloop_152:
020A:1865  F0> E8 01CE		                           lock	call	sub_24			; (1A37)
020A:1869  12 00				adc	al,[bx+si]
020A:186B  46					inc	si
020A:186C  07					pop	es
020A:186D  0A 02				or	al,[bp+si]
020A:186F  E8 01C5				call	sub_24			; (1A37)
020A:1872  1B 00				sbb	ax,[bx+si]
020A:1874  0A 04				or	al,[si]
020A:1876  0A 02				or	al,[bp+si]
020A:1878  EB 02				jmp	short loc_153		; (187C)
020A:187A  90					nop
020A:187B  00 E8				add	al,ch
020A:187D  B8 2401				mov	ax,2401h
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 32

020A:1880  00 A4 0A0C				add	data_89[si],ah		; (020A:0A0C=1Ch)
020A:1884  02 E8				add	ch,al
020A:1886  AF					scasw				; Scan es:[di] for ax
020A:1887  01 31				add	[bx+di],si
020A:1889  00 EB				add	bl,ch
020A:188B  10 FF				adc	bh,bh
020A:188D  03 0A				add	cx,[bp+si]
020A:188F  02 4B 42				add	cl,[bp+di+42h]
020A:1892  00 EB				add	bl,ch
020A:1894  0C 00				or	al,0
020A:1896  00					db	0
020A:1897  00					db	0
020A:1898  00					db	0
020A:1899  00 00				add	[bx+si],al
020A:189B  00 E8				add	al,ch
020A:189D  98					cbw				; Convrt byte to word
020A:189E  01 3C				add	[si],di
020A:18A0  00 E9				add	cl,ch
020A:18A2  32 01				xor	al,[bx+di]
020A:18A4  EB 10				jmp	short loc_154		; (18B6)
020A:18A6  FF 03				inc	word ptr [bp+di]
020A:18A8  0A 02				or	al,[bp+si]
020A:18AA  4B					dec	bx
020A:18AB  42					inc	dx
020A:18AC  00 EB				add	bl,ch
020A:18AE  0C 00				or	al,0
020A:18B0  00					db	0
020A:18B1  00					db	0
020A:18B2  00					db	0
020A:18B3  00 00				add	[bx+si],al
020A:18B5  00 E8				add	al,ch
020A:18B7  7E 01				jle	loc_155			; Jump if < or =
020A:18B9  56					push	si
020A:18BA			loc_155:
020A:18BA  00 E9				add	cl,ch
020A:18BC  18 01				sbb	[bx+di],al
020A:18BE  EB 10				jmp	short loc_156		; (18D0)
020A:18C0  FF 03				inc	word ptr [bp+di]
020A:18C2  0A 02				or	al,[bp+si]
020A:18C4  4B					dec	bx
020A:18C5  42					inc	dx
020A:18C6  00 EB				add	bl,ch
020A:18C8  0C 00				or	al,0
020A:18CA  00					db	0
020A:18CB  00					db	0
020A:18CC  00					db	0
020A:18CD  00 00				add	[bx+si],al
020A:18CF  00 E8				add	al,ch
020A:18D1  64					db	64h
020A:18D2  01 70 00		;*		add	[bx+si+0],si
020A:18D2  01 70 00				db	 01h, 70h, 00h
020A:18D5  E9 00FE				jmp	loc_169			; (19D6)
020A:18D8  EB 10				jmp	short loc_157		; (18EA)
020A:18DA  FF 03				inc	word ptr [bp+di]
020A:18DC  0A 02				or	al,[bp+si]
020A:18DE  4B					dec	bx
020A:18DF  42					inc	dx
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 33

020A:18E0  00 EB				add	bl,ch
020A:18E2  0C 00				or	al,0
020A:18E4  00					db	0
020A:18E5  00					db	0
020A:18E6  00					db	0
020A:18E7  00 00				add	[bx+si],al
020A:18E9  00 E8				add	al,ch
020A:18EB  4A					dec	dx
020A:18EC  01 8A E900				add	[bp+si-1700h],cx
020A:18F0  E4 00				in	al,0			; port 0, DMA-1 bas&add ch 0
020A:18F2  EB 10				jmp	short loc_158		; (1904)
020A:18F4  B3 07				mov	bl,7
020A:18F6  0A 02				or	al,[bp+si]
020A:18F8  4B					dec	bx
020A:18F9  42					inc	dx
020A:18FA  00 EB				add	bl,ch
020A:18FC  0C 00				or	al,0
020A:18FE  00					db	0
020A:18FF  00					db	0
020A:1900  00					db	0
020A:1901  00 00				add	[bx+si],al
020A:1903  00 E8				add	al,ch
020A:1905  30 01				xor	[bx+di],al
020A:1907  A4					movsb				; Mov [si] to es:[di]
020A:1908  00 E9				add	cl,ch
020A:190A  CA EB00				retf	0EB00h			; Return far
020A:190D  10 B4 0A06				adc	data_88[si],dh		; (020A:0A06=74h)
020A:1911  02 4B 42				add	cl,[bp+di+42h]
020A:1914  00 EB				add	bl,ch
020A:1916  0C 00				or	al,0
020A:1918  00					db	0
020A:1919  00					db	0
020A:191A  00					db	0
020A:191B  00 00				add	[bx+si],al
020A:191D  00 E8				add	al,ch
020A:191F  16					push	ss
020A:1920  01 BE E900				add	[bp-1700h],di
020A:1924  B0 00				mov	al,0
020A:1926  EB 10				jmp	short loc_159		; (1938)
020A:1928  B4 06				mov	ah,6
020A:192A  0A 02				or	al,[bp+si]
020A:192C  4B					dec	bx
020A:192D  42					inc	dx
020A:192E  00 EB				add	bl,ch
020A:1930  0C 00				or	al,0
020A:1932  00					db	0
020A:1933  00					db	0
020A:1934  00					db	0
020A:1935  00 00				add	[bx+si],al
020A:1937  00 E8				add	al,ch
020A:1939  FC					cld				; Clear direction
020A:193A  00 D8				add	al,bl
020A:193C  00 E9				add	cl,ch
020A:193E  96					xchg	si,ax
020A:193F  00 EB				add	bl,ch
020A:1941  10 B4 0A06				adc	data_88[si],dh		; (020A:0A06=74h)
020A:1945  02 4B 42				add	cl,[bp+di+42h]
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 34

020A:1948  00 EB				add	bl,ch
020A:194A  0C 00				or	al,0
020A:194C  00					db	0
020A:194D  00					db	0
020A:194E  00					db	0
020A:194F  00 00				add	[bx+si],al
020A:1951  00 E8				add	al,ch
020A:1953  E2 00				loop	locloop_160		; Loop if cx > 0


020A:1955			locloop_160:
020A:1955  F2					db	0F2h
020A:1956  00 EB				add	bl,ch
020A:1958  7D 90		;*		jge	loc_157			;*Jump if > or =
020A:1958  7D 90				db	 7Dh, 90h
020A:195A  EB 10				jmp	short loc_161		; (196C)
020A:195C  B4 06				mov	ah,6
020A:195E  0A 02				or	al,[bp+si]
020A:1960  4B					dec	bx
020A:1961  42					inc	dx
020A:1962  00 EB				add	bl,ch
020A:1964  0C 00				or	al,0
020A:1966  00					db	0
020A:1967  00					db	0
020A:1968  00					db	0
020A:1969  00 00				add	[bx+si],al
020A:196B  00 E8				add	al,ch
020A:196D  C8					db	0C8h
020A:196E  00 0C				add	[si],cl
020A:1970  01 EB				add	bx,bp
020A:1972  63					db	63h
020A:1973  90					nop
020A:1974  EB 10				jmp	short loc_162		; (1986)
020A:1976  B4 06				mov	ah,6
020A:1978  0A 02				or	al,[bp+si]
020A:197A  4B					dec	bx
020A:197B  42					inc	dx
020A:197C  00 EB				add	bl,ch
020A:197E  0C 00				or	al,0
020A:1980  00					db	0
020A:1981  00					db	0
020A:1982  00					db	0
020A:1983  00 00				add	[bx+si],al
020A:1985  00 E8				add	al,ch
020A:1987  AE					scasb				; Scan es:[di] for al
020A:1988  00 26 EB01				add	byte ptr ds:[0EB01h],ah	; (020A:EB01=36h)
020A:198C  49					dec	cx
020A:198D  90					nop

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_23		proc	near
020A:198E  1E					push	ds
020A:198F  50					push	ax
020A:1990  B8 0040				mov	ax,40h
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 35

020A:1993  8E D8				mov	ds,ax
020A:1995  9F					lahf				; Load ah from flags
020A:1996  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020A:199C  75 0C				jnz	loc_164			; Jump if not zero
020A:199E  F0> 81 26 0314 FDFF	                           lock	and	word ptr ds:[314h],0FDFFh	; (0040:0314=3200h)
020A:19A5			loc_163:
020A:19A5  9E					sahf				; Store ah into flags
020A:19A6  58					pop	ax
020A:19A7  1F					pop	ds
020A:19A8  EB 03				jmp	short loc_165		; (19AD)
020A:19AA			loc_164:
020A:19AA  FA					cli				; Disable interrupts
020A:19AB  EB F8				jmp	short loc_163		; (19A5)
020A:19AD			loc_165:
020A:19AD  C3					retn
				sub_23		endp

							                        ;* No entry point to code
020A:19AE  1E					push	ds
020A:19AF  50					push	ax
020A:19B0  B8 0040				mov	ax,40h
020A:19B3  8E D8				mov	ds,ax
020A:19B5  9F					lahf				; Load ah from flags
020A:19B6  F7 06 0314 0003			test	word ptr ds:[314h],3	; (0040:0314=3200h)
020A:19BC  75 14				jnz	loc_167			; Jump if not zero
020A:19BE  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020A:19C4  75 0C				jnz	loc_167			; Jump if not zero
020A:19C6  F0> 81 0E 0314 0200	                           lock	or	word ptr ds:[314h],200h	; (0040:0314=3200h)
020A:19CD			loc_166:
020A:19CD  9E					sahf				; Store ah into flags
020A:19CE  58					pop	ax
020A:19CF  1F					pop	ds
020A:19D0  EB 03				jmp	short loc_168		; (19D5)
020A:19D2			loc_167:
020A:19D2  FB					sti				; Enable interrupts
020A:19D3  EB F8				jmp	short loc_166		; (19CD)
020A:19D5			loc_168:
020A:19D5  C3					retn
020A:19D6			loc_169:
020A:19D6  1E					push	ds
020A:19D7  50					push	ax
020A:19D8  B8 0040				mov	ax,40h
020A:19DB  8E D8				mov	ds,ax
020A:19DD  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020A:19E3  75 4F				jnz	loc_177			; Jump if not zero
020A:19E5  55					push	bp
020A:19E6  8B EC				mov	bp,sp
020A:19E8  8B 46 0A				mov	ax,[bp+0Ah]
020A:19EB  5D					pop	bp
020A:19EC  A9 0100				test	ax,100h
020A:19EF  75 43				jnz	loc_177			; Jump if not zero
020A:19F1  A9 0200				test	ax,200h
020A:19F4  74 22				jz	loc_173			; Jump if zero
020A:19F6  F0> 81 0E 0314 0200	                           lock	or	word ptr ds:[314h],200h	; (0040:0314=3200h)
020A:19FD  F7 06 0314 0003			test	word ptr ds:[314h],3	; (0040:0314=3200h)
020A:1A03  75 2F				jnz	loc_177			; Jump if not zero
020A:1A05			loc_170:
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 36

020A:1A05  86 E0				xchg	ah,al
020A:1A07  FC					cld				; Clear direction
020A:1A08  A8 04				test	al,4
020A:1A0A  75 25				jnz	loc_176			; Jump if not zero
020A:1A0C			loc_171:
020A:1A0C  A8 08				test	al,8
020A:1A0E  75 11				jnz	loc_174			; Jump if not zero
020A:1A10  70 19				jo	loc_175			; Jump if overflow=1
020A:1A12			loc_172:
020A:1A12  9E					sahf				; Store ah into flags
020A:1A13  58					pop	ax
020A:1A14  1F					pop	ds
020A:1A15  CA 0002				retf	2			; Return far
020A:1A18			loc_173:
020A:1A18  F0> 81 26 0314 FDFF	                           lock	and	word ptr ds:[314h],0FDFFh	; (020A:0314=3231h)
020A:1A1F  EB E4				jmp	short loc_170		; (1A05)
020A:1A21			loc_174:
020A:1A21  70 EF				jo	loc_172			; Jump if overflow=1
020A:1A23  50					push	ax
020A:1A24  B0 7F				mov	al,7Fh
020A:1A26  04 02				add	al,2
020A:1A28  58					pop	ax
020A:1A29  EB E7				jmp	short loc_172		; (1A12)
020A:1A2B			loc_175:
020A:1A2B  50					push	ax
020A:1A2C  32 C0				xor	al,al			; Zero register
020A:1A2E  58					pop	ax
020A:1A2F  EB E1				jmp	short loc_172		; (1A12)
020A:1A31			loc_176:
020A:1A31  FD					std				; Set direction flag
020A:1A32  EB D8				jmp	short loc_171		; (1A0C)
020A:1A34			loc_177:
020A:1A34  58					pop	ax
020A:1A35  1F					pop	ds
020A:1A36  CF					iret				; Interrupt return

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_24		proc	near
020A:1A37  50					push	ax
020A:1A38  55					push	bp
020A:1A39  06					push	es
020A:1A3A  2E: 8E 06 000A			mov	es,word ptr cs:[0Ah]	; (020A:000A=272Dh)
020A:1A3F  2E: 8B 2E 0010			mov	bp,word ptr cs:[10h]	; (020A:0010=1FBFh)
020A:1A44  B0 01				mov	al,1
020A:1A46  26: 86 46 00				xchg	es:[bp],al
020A:1A4A  3C 00				cmp	al,0
020A:1A4C  75 51				jne	loc_179			; Jump if not equal
020A:1A4E  2E: 83 2E 0010 08			sub	word ptr cs:[10h],8	; (020A:0010=1FBFh)
020A:1A54			loc_178:
020A:1A54  26: 89 66 02				mov	es:[bp+2],sp
020A:1A58  26: 8C 56 04				mov	es:[bp+4],ss
020A:1A5C  8B C5				mov	ax,bp
020A:1A5E  26: 8B 6E 06				mov	bp,es:[bp+6]
020A:1A62  26: 39 46 00				cmp	es:[bp],ax
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 37

020A:1A66  75 44				jne	loc_181			; Jump if not equal
020A:1A68  55					push	bp
020A:1A69  8B EC				mov	bp,sp
020A:1A6B  8B 46 08				mov	ax,[bp+8]
020A:1A6E  5D					pop	bp
020A:1A6F  06					push	es
020A:1A70  17					pop	ss
020A:1A71  8B E5				mov	sp,bp
020A:1A73  8B E8				mov	bp,ax
020A:1A75  2E: 8B 6E 00				mov	bp,cs:[bp]
020A:1A79  9C					pushf				; Push flags
020A:1A7A  2E: FF 5E 00				call	dword ptr cs:[bp]	;*
020A:1A7E  8B EC				mov	bp,sp
020A:1A80  26: 8B 6E 00				mov	bp,es:[bp]
020A:1A84  26: 8E 56 04				mov	ss,es:[bp+4]
020A:1A88  26: 8B 66 02				mov	sp,es:[bp+2]
020A:1A8C  26: C6 46 00 00			mov	byte ptr es:[bp],0
020A:1A91  2E: 89 2E 0010			mov	word ptr cs:[10h],bp	; (020A:0010=1FBFh)
020A:1A96  07					pop	es
020A:1A97  5D					pop	bp
020A:1A98  58					pop	ax
020A:1A99  83 C4 02				add	sp,2
020A:1A9C  E9 FF37				jmp	loc_169			; (19D6)
020A:1A9F			loc_179:
020A:1A9F  3C 01				cmp	al,1
020A:1AA1  74 04				je	loc_180			; Jump if equal
020A:1AA3  26: 86 46 00				xchg	es:[bp],al
020A:1AA7			loc_180:
020A:1AA7  E8 0012				call	sub_25			; (1ABC)
020A:1AAA  EB A8				jmp	short loc_178		; (1A54)
020A:1AAC			loc_181:
020A:1AAC  2E: 3B 2E 000C			cmp	bp,word ptr cs:[0Ch]	; (020A:000C=9028h)
020A:1AB1  72 F4				jb	loc_180			; Jump if below
020A:1AB3  8B E8				mov	bp,ax
020A:1AB5  26: C6 46 00 03			mov	byte ptr es:[bp],3
020A:1ABA  EB EB				jmp	short loc_180		; (1AA7)
				sub_24		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_25		proc	near
020A:1ABC  2E: 8B 2E 000E			mov	bp,word ptr cs:[0Eh]	; (020A:000E=0A02Bh)
020A:1AC1			loc_182:
020A:1AC1  26: 80 7E 00 00			cmp	byte ptr es:[bp],0
020A:1AC6  75 12				jne	loc_184			; Jump if not equal
020A:1AC8  B0 01				mov	al,1
020A:1ACA  26: 86 46 00				xchg	es:[bp],al
020A:1ACE  3C 00				cmp	al,0
020A:1AD0  74 14				je	loc_185			; Jump if equal
020A:1AD2  3C 01				cmp	al,1
020A:1AD4  74 04				je	loc_184			; Jump if equal
020A:1AD6  26: 88 46 00				mov	es:[bp],al
020A:1ADA			loc_184:
020A:1ADA  2E: 3B 2E 000C			cmp	bp,word ptr cs:[0Ch]	; (020A:000C=9028h)
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 38

020A:1ADF  74 06				je	loc_186			; Jump if equal
020A:1AE1  83 ED 08				sub	bp,8
020A:1AE4  EB DB				jmp	short loc_182		; (1AC1)
020A:1AE6			loc_185:
020A:1AE6  C3					retn
020A:1AE7			loc_186:
020A:1AE7  E8 FEA4				call	sub_23			; (198E)

020A:1AEA			locloop_187:
020A:1AEA  B0 FF				mov	al,0FFh
020A:1AEC  E6 21				out	21h,al			; port 21h, 8259-1 int comands
020A:1AEE  E6 A1				out	0A1h,al			; port 0A1h  al = 0FFh, inhibit interr
020A:1AF0  8C CE				mov	si,cs
020A:1AF2  8E DE				mov	ds,si
020A:1AF4  BE 02CB				mov	si,2CBh
020A:1AF7  50					push	ax
020A:1AF8  1E					push	ds
020A:1AF9  B8 0070				mov	ax,70h
020A:1AFC  8E D8				mov	ds,ax
020A:1AFE  F6 06 0337 01			test	byte ptr ds:[337h],1	; (0070:0337=0)
020A:1B03  1F					pop	ds
020A:1B04  58					pop	ax
020A:1B05  74 05				jz	loc_188			; Jump if zero
020A:1B07  9A 0070:0338		;*		call	far ptr sub_1		;*(0070:0338)
020A:1B07  9A					db	9Ah
020A:1B08  0338 0070				dw	338h, 70h
020A:1B0C			loc_188:
020A:1B0C  AC					lodsb				; String [si] to al
020A:1B0D  3C 24				cmp	al,24h			; '$'
020A:1B0F  74 08				je	loc_190			; Jump if equal
020A:1B11  B3 07				mov	bl,7
020A:1B13  B4 0E				mov	ah,0Eh
020A:1B15  CD 10				int	10h			; Video display   ah=functn 0Eh
										;  write char al, teletype mode
020A:1B17  EB F3				jmp	short loc_188		; (1B0C)
020A:1B19			loc_190:
020A:1B19  EB FE				jmp	short loc_190		; (1B19)
				sub_25		endp

020A:1B1B  0D 070A				or	ax,70Ah
020A:1B1E  0D 8F0A				or	ax,8F0Ah
020A:1B21  A5					movsw				; Mov [si] to es:[di]
020A:1B22  E0 A5		;*		loopnz	locloop_183		;*Loop if zf=0, cx>0

020A:1B22  E0 A5				db	0E0h,0A5h
020A:1B24  AF					scasw				; Scan es:[di] for ax
020A:1B25  AE					scasb				; Scan es:[di] for al
020A:1B26  AB					stosw				; Store ax to es:[di]
020A:1B27  AD					lodsw				; String [si] to ax
020A:1B28  A5					movsw				; Mov [si] to es:[di]
020A:1B29  AD					lodsw				; String [si] to ax
020A:1B2A  A8 A5				test	al,0A5h
020A:1B2C  20 A2 E3AD				and	[bp+si-1C53h],ah
020A:1B30  E2 E0		;*		loop	locloop_189		;*Loop if cx > 0

020A:1B30  E2 E0				db	0E2h,0E0h
020A:1B32  A5					movsw				; Mov [si] to es:[di]
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 39

020A:1B33  AD					lodsw				; String [si] to ax
020A:1B34  AD					lodsw				; String [si] to ax
020A:1B35  A5					movsw				; Mov [si] to es:[di]
020A:1B36  A3 20AE				mov	data_135,ax		; (020A:20AE=2020h)
020A:1B39  E1 E2		;*		loopz	locloop_191		;*Loop if zf=1, cx>0

020A:1B39  E1 E2				db	0E1h,0E2h
020A:1B3B  A5					movsw				; Mov [si] to es:[di]
020A:1B3C  AA					stosb				; Store al to es:[di]
020A:1B3D  A0 0A0D				mov	al,data_90		; (020A:0A0D=0)
020A:1B40  91					xchg	cx,ax
020A:1B41  A8 E1				test	al,0E1h
020A:1B43  E2 A5				loop	locloop_187		; Loop if cx > 0

020A:1B45  AC					lodsb				; String [si] to al
020A:1B46  A0 AE20				mov	al,byte ptr ds:[0AE20h]	; (020A:AE20=0Ch)
020A:1B49  E1 E2		;*		loopz	locloop_192		;*Loop if zf=1, cx>0

020A:1B49  E1 E2				db	0E1h,0E2h
020A:1B4B  A0 AEAD				mov	al,byte ptr ds:[0AEADh]	; (020A:AEAD=10h)
020A:1B4E  A2 A5AB				mov	byte ptr ds:[0A5ABh],al	; (020A:A5AB=0A1h)
020A:1B51  AD					lodsw				; String [si] to ax
020A:1B52  A0 0A0D				mov	al,data_90		; (020A:0A0D=0)
020A:1B55  24 07				and	al,7
020A:1B57  00 09				add	[bx+di],cl
020A:1B59  69					db	69h
020A:1B5A  00 00				add	[bx+si],al
020A:1B5C  06					push	es
020A:1B5D  00 06 0000				add	byte ptr ds:[0],al	; (020A:0000=28h)
020A:1B61  00					db	0
020A:1B62  00					db	0
020A:1B63  00 00				add	[bx+si],al
020A:1B65  00 C6				add	dh,al
020A:1B67  0007[00]				db	7 dup (0)
020A:1B6E  46					inc	si
020A:1B6F  01 00				add	[bx+si],ax
020A:1B71  00					db	0
020A:1B72  00					db	0
020A:1B73  00 00				add	[bx+si],al
020A:1B75  00 C6				add	dh,al
020A:1B77  01 00				add	[bx+si],ax
020A:1B79  00					db	0
020A:1B7A  00					db	0
020A:1B7B  00 00				add	[bx+si],al
020A:1B7D  00 46 02				add	[bp+2],al
020A:1B80  00					db	0
020A:1B81  00					db	0
020A:1B82  00					db	0
020A:1B83  00 00				add	[bx+si],al
020A:1B85  00 C6				add	dh,al
020A:1B87  02 00				add	al,[bx+si]
020A:1B89  00					db	0
020A:1B8A  00					db	0
020A:1B8B  00 00				add	[bx+si],al
020A:1B8D  00 46 03				add	[bp+3],al
020A:1B90  00					db	0
020A:1B91  00					db	0
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 40

020A:1B92  00					db	0
020A:1B93  00 00				add	[bx+si],al
020A:1B95  00 C6				add	dh,al
020A:1B97  03 00				add	ax,[bx+si]
020A:1B99  00					db	0
020A:1B9A  00					db	0
020A:1B9B  00 00				add	[bx+si],al
020A:1B9D  00 46 04				add	[bp+4],al
020A:1BA0  00 00				add	[bx+si],al
020A:1BA2  06					push	es
020A:1BA3  06					push	es
020A:1BA4  FB					sti				; Enable interrupts
020A:1BA5  8D					db	8Dh
020A:1BA6  C6 04 00				mov	byte ptr [si],0
020A:1BA9  00FD[00]				db	253 dup (0)
020A:1CA6  08 00				or	[bx+si],al
020A:1CA8  0078[00]				db	120 dup (0)
020A:1D20  00			data_117	db	0
020A:1D21  00					db	0
020A:1D22  00					db	0
020A:1D23  00 00				add	[bx+si],al
020A:1D25  00 10				add	[bx+si],dl
020A:1D27  00					db	0
020A:1D28  007E[00]				db	126 dup (0)
020A:1DA6  18 00				sbb	[bx+si],al
020A:1DA8  007E[00]				db	126 dup (0)
020A:1E26  20 00				and	[bx+si],al
020A:1E28  0061[00]				db	97 dup (0)
020A:1E89  00			data_121	db	0
020A:1E8A  00					db	0
020A:1E8B  0000 0000		data_122	dd	00000h
020A:1E8F  00					db	0
020A:1E90  00					db	0
020A:1E91  00					db	0
020A:1E92  00					db	0
020A:1E93  00					db	0
020A:1E94  00					db	0
020A:1E95  00					db	0
020A:1E96  00					db	0
020A:1E97  00					db	0
020A:1E98  00					db	0
020A:1E99  00					db	0
020A:1E9A  00					db	0
020A:1E9B  00					db	0
020A:1E9C  00					db	0
020A:1E9D  00					db	0
020A:1E9E  00					db	0
020A:1E9F  00					db	0
020A:1EA0  00					db	0
020A:1EA1  00					db	0
020A:1EA2  00					db	0
020A:1EA3  00 00				add	[bx+si],al
020A:1EA5  00 28				add	[bx+si],ch
020A:1EA7  00					db	0
020A:1EA8  0046[00]				db	70 dup (0)
020A:1EEE  0000 0000		data_124	dd	00000h			; Data table (indexed access)
020A:1EF2  00					db	0
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 41

020A:1EF3  00					db	0
020A:1EF4  00					db	0
020A:1EF5  00					db	0
020A:1EF6  00					db	0
020A:1EF7  00					db	0
020A:1EF8  00					db	0
020A:1EF9  00					db	0
020A:1EFA  00					db	0
020A:1EFB  00					db	0
020A:1EFC  00					db	0
020A:1EFD  00					db	0
020A:1EFE  00					db	0
020A:1EFF  00					db	0
020A:1F00  00					db	0
020A:1F01  00					db	0
020A:1F02  00					db	0
020A:1F03  00					db	0
020A:1F04  00					db	0
020A:1F05  00					db	0
020A:1F06  00					db	0
020A:1F07  00					db	0
020A:1F08  00					db	0
020A:1F09  00					db	0
020A:1F0A  00					db	0
020A:1F0B  00					db	0
020A:1F0C  00					db	0
020A:1F0D  00					db	0
020A:1F0E  00					db	0
020A:1F0F  00					db	0
020A:1F10  00					db	0
020A:1F11  00					db	0
020A:1F12  00					db	0
020A:1F13  00					db	0
020A:1F14  00					db	0
020A:1F15  00					db	0
020A:1F16  00					db	0
020A:1F17  00					db	0
020A:1F18  00					db	0
020A:1F19  00					db	0
020A:1F1A  00					db	0
020A:1F1B  00					db	0
020A:1F1C  00					db	0
020A:1F1D  00					db	0
020A:1F1E  00					db	0
020A:1F1F  00					db	0
020A:1F20  00					db	0
020A:1F21  00					db	0
020A:1F22  00					db	0
020A:1F23  00 00				add	[bx+si],al
020A:1F25  00 30				add	[bx+si],dh
020A:1F27  00					db	0
020A:1F28  007E[00]				db	126 dup (0)
020A:1FA6  38 00				cmp	[bx+si],al
020A:1FA8  006C[00]				db	108 dup (0)
020A:2014  01 91 9101				add	word ptr ds:[9101h][bx+di],dx	; (020A:9101=74FFh)
020A:2018  FB					sti				; Enable interrupts
020A:2019  8D					db	8Dh
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 42

020A:201A  F3					db	0F3h
020A:201B  03 B7 FB00				add	si,word ptr ds:[0FB00h][bx]	; (020A:FB00=0BD88h)
020A:201F  8D 2E 8F02				lea	bp,cs:[8F02h]		; Load effective addr
020A:2023  03 46 30				add	ax,[bp+30h]
020A:2026  40					inc	ax
020A:2027  00 04				add	[si],al
020A:2029  00 C3				add	bl,al
020A:202B  3C 00				cmp	al,0
020A:202D  00 06 4D00				add	byte ptr ds:[4D00h],al	; (020A:4D00=33h)
020A:2031  0E					push	cs
020A:2032  04 B5				add	al,0B5h
020A:2034  00 00				add	[bx+si],al
020A:2036  06					push	es
020A:2037  00 43 4F				add	[bp+di+4Fh],al
020A:203A  4D					dec	bp
020A:203B  4D					dec	bp
020A:203C  41					inc	cx
020A:203D  4E					dec	si
020A:203E  44					inc	sp
020A:203F  00 CD				add	ch,cl
020A:2041  20 FF				and	bh,bh
020A:2043  9F					lahf				; Load ah from flags
020A:2044  00 9A FEF0				add	[bp+si-110h],bl
020A:2048  1D 7FF0				sbb	ax,7FF0h
020A:204B  01 0E 4B04				add	word ptr ds:[4B04h],cx	; (020A:4B04=9B66h)
020A:204F  01 0E 5604				add	word ptr ds:[5604h],cx	; (020A:5604=25E8h)
020A:2053  01 0E 0E04				add	data_98,cx		; (020A:0E04=0DFE8h)
020A:2057  04 01				add	al,1
020A:2059  01 01				add	[bx+di],ax
020A:205B  00 02				add	[bp+si],al
020A:205D  000F[FF]				db	15 dup (0FFh)
020A:206C  CC					int	3			; Debug breakpoint
020A:206D  04 FA				add	al,0FAh
020A:206F  05 040E				add	ax,40Eh
020A:2072  14 00				adc	al,0
020A:2074  18 00				sbb	[bx+si],al
020A:2076  0E					push	cs
020A:2077  04 FF				add	al,0FFh
020A:2079  FF					db	0FFh
020A:207A  FF					db	0FFh
020A:207B  FF 00				inc	word ptr [bx+si]
020A:207D  00 00				add	[bx+si],al
020A:207F  00 05				add	[di],al
020A:2081  000F[00]				db	15 dup (0)
020A:2090  CD 21				int	21h			; ??INT Non-standard interrupt
020A:2092  CB					retf				; Return far
020A:2093  000A[00]				db	10 dup (0)
020A:209D  20 20 20				db	 20h, 20h, 20h
020A:20A0  20			data_132	db	20h			; Data table (indexed access)
020A:20A1  20 20				and	[bx+si],ah
020A:20A3  20 20				and	[bx+si],ah
020A:20A5  2020			data_133	dw	2020h			; Data table (indexed access)
020A:20A7  20 00				and	[bx+si],al
020A:20A9  00					db	0
020A:20AA  00 00				add	[bx+si],al
020A:20AC  00 20				add	[bx+si],ah
020A:20AE  2020			data_135	dw	2020h
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 43

020A:20B0  0008[20]				db	8 dup (20h)
020A:20B8  0009[00]				db	9 dup (0)
020A:20C1  0D 2020				or	ax,2020h
020A:20C4  20 53 45				and	[bp+di+45h],dl
020A:20C7  54					push	sp
020A:20C8  20 42 4C				and	[bp+si+4Ch],al
020A:20CB  41					inc	cx
020A:20CC  53					push	bx
020A:20CD  54					push	sp
020A:20CE  45					inc	bp
020A:20CF  52					push	dx
020A:20D0  3D 3041				cmp	ax,3041h
020A:20D3  0D A8AD				or	ax,0A8ADh
020A:20D6  A5					movsw				; Mov [si] to es:[di]
020A:20D7  20 A4 EFAB				and	byte ptr ds:[0EFABh][si],ah	; (020A:EFAB=40h)
020A:20DB  20 A1 A7A2				and	byte ptr ds:[0A7A2h][bx+di],ah	; (020A:A7A2=0)
020A:20DF  AE					scasb				; Scan es:[di] for al
020A:20E0  A2 A3AE				mov	byte ptr ds:[0A3AEh],al	; (020A:A3AE=30h)
020A:20E3  AE					scasb				; Scan es:[di] for al
020A:20E4  20 AF E0AE				and	byte ptr ds:[0E0AEh][bx],ch	; (020A:E0AE=1Eh)
020A:20E8  E2 A0		;*		loop	locloop_193		;*Loop if cx > 0

020A:20E8  E2 A0				db	0E2h,0A0h
020A:20EA  20 A2 AEA2				and	[bp+si-515Eh],ah
020A:20EE  A4					movsb				; Mov [si] to es:[di]
020A:20EF  A0			data_138	db	0A0h
020A:20F0  2D EBA2				sub	ax,0EBA2h
020A:20F3  A2 A4AE				mov	byte ptr ds:[0A4AEh],al	; (020A:A4AE=1Fh)
020A:20F6  A0 5320				mov	al,byte ptr ds:[5320h]	; (020A:5320=81h)
020A:20F9  42					inc	dx
020A:20FA  2C 20				sub	al,20h			; ' '
020A:20FC  AD					lodsw				; String [si] to ax
020A:20FD  A0 E0AF				mov	al,byte ptr ds:[0E0AFh]	; (020A:E0AF=4Ah)
020A:2100  A8 AC				test	al,0ACh
020A:2102  A5					movsw				; Mov [si] to es:[di]
020A:2103  E0 3A				loopnz	locloop_197		; Loop if zf=0, cx>0

020A:2105  0D 0DEC				or	ax,0DECh
020A:2108  E0 EB		;*		loopnz	locloop_196		;*Loop if zf=0, cx>0

020A:2108  E0 EB				db	0E0h,0EBh
020A:210A  A5					movsw				; Mov [si] to es:[di]
020A:210B  0D 0000				or	ax,0
020A:210E  0032[00]				db	50 dup (0)
020A:2140  E9 174D				jmp	$+1750h
020A:2143  00 17				add	[bx],dl
020A:2145  64					db	64h
020A:2146  FF					db	0FFh
020A:2147  FF 37				push	word ptr [bx]
020A:2149  5E					pop	si
020A:214A  FF					db	0FFh
020A:214B  FF F5		;*		push	bp
020A:214B  FF F5				db	0FFh,0F5h
020A:214D  5C					pop	sp
020A:214E  FF					db	0FFh
020A:214F  FF 24				jmp	word ptr [si]		;*
020A:2151  61					db	61h
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 44

020A:2152  FF					db	0FFh
020A:2153  FF					db	0FFh
020A:2154  E9 FF5C		;*		jmp	loc_195			;*(20B3)
020A:2154  E9 5C FF				db	0E9h, 5Ch,0FFh
							                        ;* No entry point to code
020A:2157  FF 63 5F				jmp	word ptr [bp+di+5Fh]	;*
020A:215A  FF					db	0FFh
							                        ;* No entry point to code
020A:215B  FF 01				inc	word ptr [bx+di]
020A:215D  61					db	61h
020A:215E  FF					db	0FFh
020A:215F  FF 6E 5E				jmp	dword ptr [bp+5Eh]	;*
020A:2162  FF					db	0FFh
							                        ;* No entry point to code
020A:2163  FF 5A 64				call	dword ptr [bp+si+64h]	;*
020A:2166  FF					db	0FFh
020A:2167  FF 82 FF5F				inc	word ptr [bp+si-0A1h]
020A:216B  FF D3				call	bx			;*
020A:216D  64					db	64h
020A:216E  FF					db	0FFh
020A:216F  FF AF D900				jmp	dword ptr ds:[0D900h][bx]	;*(020A:D900=8889h)
							                        ;* No entry point to code
020A:2173  02 01				add	al,[bx+di]
020A:2175  FB					sti				; Enable interrupts
020A:2176  E8 0064				call	sub_26			; (21DD)
020A:2179  1E					push	ds
020A:217A  0E					push	cs
020A:217B  2E: FF 2E 0104			jmp	dword ptr cs:[104h]	; (020A:0104=908h)
							                        ;* No entry point to code
020A:2180  FB					sti				; Enable interrupts
020A:2181  E8 0059				call	sub_26			; (21DD)
020A:2184  1E					push	ds
020A:2185  0E					push	cs
020A:2186  2E: FF 2E 0108			jmp	dword ptr cs:[108h]	; (020A:0108=0A302h)
							                        ;* No entry point to code
020A:218B  FB					sti				; Enable interrupts
020A:218C  E8 004E				call	sub_26			; (21DD)
020A:218F  1E					push	ds
020A:2190  0E					push	cs
020A:2191  2E: FF 2E 010C			jmp	dword ptr cs:[10Ch]	; (020A:010C=9028h)
							                        ;* No entry point to code
020A:2196  FB					sti				; Enable interrupts
020A:2197  E8 0043				call	sub_26			; (21DD)
020A:219A  1E					push	ds
020A:219B  0E					push	cs
020A:219C  2E: FF 2E 0110			jmp	dword ptr cs:[110h]	; (020A:0110=1FBFh)
020A:21A1			loc_198:
020A:21A1  E8 0039				call	sub_26			; (21DD)
020A:21A4  1E					push	ds
020A:21A5  0E					push	cs
020A:21A6  2E: FF 2E 0114			jmp	dword ptr cs:[114h]	; (020A:0114=0C0Bh)
							                        ;* No entry point to code
020A:21AB  E8 002F				call	sub_26			; (21DD)
020A:21AE  1E					push	ds
020A:21AF  0E					push	cs
020A:21B0  2E: FF 2E 0118			jmp	dword ptr cs:[118h]	; (020A:0118=0)
							                        ;* No entry point to code
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 45

020A:21B5  E8 0025				call	sub_26			; (21DD)
020A:21B8  1E					push	ds
020A:21B9  0E					push	cs
020A:21BA  2E: FF 2E 011C			jmp	dword ptr cs:[11Ch]	; (020A:011C=145Dh)
020A:21BF			loc_199:
020A:21BF  E8 001B				call	sub_26			; (21DD)
020A:21C2  1E					push	ds
020A:21C3  0E					push	cs
020A:21C4  2E: FF 2E 0120			jmp	dword ptr cs:[120h]	; (020A:0120=0A3BAh)
							                        ;* No entry point to code
020A:21C9  E8 0011				call	sub_26			; (21DD)
020A:21CC  1E					push	ds
020A:21CD  0E					push	cs
020A:21CE  2E: FF 2E 0124			jmp	dword ptr cs:[124h]	; (020A:0124=201h)
							                        ;* No entry point to code
020A:21D3  E8 0007				call	sub_26			; (21DD)
020A:21D6  1E					push	ds
020A:21D7  0E					push	cs
020A:21D8  2E: FF 2E 0128			jmp	dword ptr cs:[128h]	; (020A:0128=1405h)

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_26		proc	near
020A:21DD  9C					pushf				; Push flags
020A:21DE  50					push	ax
020A:21DF  2E: 80 3E 0134 00			cmp	byte ptr cs:[134h],0	; (020A:0134=0)
020A:21E5  74 08				je	loc_200			; Jump if equal
020A:21E7  E8 000D				call	sub_27			; (21F7)
020A:21EA  73 03				jnc	loc_200			; Jump if carry=0
020A:21EC  E8 001B				call	sub_28			; (220A)
020A:21EF			loc_200:
020A:21EF  58					pop	ax
020A:21F0  9D					popf				; Pop flags
020A:21F1  C3					retn
				sub_26		endp

020A:21F2  EA 040E:0135		;*		jmp	far ptr loc_341		;*(040E:0135)
020A:21F2  EA					db	0EAh
020A:21F3  0135 040E				dw	135h, 40Eh

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_27		proc	near
020A:21F7  53					push	bx
020A:21F8  50					push	ax
020A:21F9  B4 07				mov	ah,7
020A:21FB  2E: FF 1E 0130			call	dword ptr cs:[130h]	; (020A:0130=3E3Dh)
020A:2200  0B C0				or	ax,ax			; Zero ?
020A:2202  58					pop	ax
020A:2203  5B					pop	bx
020A:2204  75 02				jnz	loc_201			; Jump if not zero
020A:2206  F9					stc				; Set carry flag
020A:2207  C3					retn
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 46

020A:2208			loc_201:
020A:2208  F8					clc				; Clear carry flag
020A:2209  C3					retn
				sub_27		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_28		proc	near
020A:220A  53					push	bx
020A:220B  50					push	ax
020A:220C  B4 05				mov	ah,5
020A:220E  2E: FF 1E 0130			call	dword ptr cs:[130h]	; (020A:0130=3E3Dh)
020A:2213  0B C0				or	ax,ax			; Zero ?
020A:2215  74 03				jz	loc_202			; Jump if zero
020A:2217  58					pop	ax
020A:2218  5B					pop	bx
020A:2219  C3					retn
020A:221A			loc_202:
020A:221A  EB FE				jmp	short loc_202		; (221A)
				sub_28		endp

							                        ;* No entry point to code
020A:221C  CD 21				int	21h			; DOS Services  ah=function 1Dh
										;  obsolete CP/M function
020A:221E  FA					cli				; Disable interrupts
020A:221F  0E					push	cs
020A:2220  17					pop	ss
020A:2221  BC 0612				mov	sp,612h
020A:2224  FB					sti				; Enable interrupts
020A:2225  0E					push	cs
020A:2226  1F					pop	ds
020A:2227  9C					pushf				; Push flags
020A:2228  50					push	ax
020A:2229  2E: A0 0614				mov	al,byte ptr cs:[614h]	; (020A:0614=2Eh)
020A:222D  A8 80				test	al,80h
020A:222F  74 07				jz	loc_203			; Jump if zero
020A:2231  24 7F				and	al,7Fh
020A:2233  2E: FF 1E 012C			call	dword ptr cs:[12Ch]	; (020A:012C=3A39h)
020A:2238			loc_203:
020A:2238  2E: 80 26 0614 7F			and	byte ptr cs:[614h],7Fh	; (020A:0614=2Eh)
020A:223E  58					pop	ax
020A:223F  9D					popf				; Pop flags
020A:2240  E9 FF5E				jmp	loc_198			; (21A1)
							                        ;* No entry point to code
020A:2243  02 00				add	al,[bx+si]
020A:2245  00 01				add	[bx+di],al
020A:2247  09 02				or	[bp+si],ax
020A:2249  41					inc	cx
020A:224A  02 00				add	al,[bx+si]
020A:224C  00 02				add	[bp+si],al
020A:224E  10 02				adc	[bp+si],al
020A:2250  0009[00]				db	9 dup (0)
020A:2259  02 22				add	ah,[bp+si]
020A:225B  02 03				add	al,[bp+di]
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 47

020A:225D  30 02				xor	[bp+si],al
020A:225F  03 2E 0002				add	bp,word ptr ds:[2]	; (020A:0002=10h)
020A:2263  0010[00]				db	16 dup (0)
020A:2273  01 09				add	[bx+di],cx
020A:2275  02 02				add	al,[bp+si]
020A:2277  5A					pop	dx
020A:2278  02 01				add	al,[bx+di]
020A:227A  3C 02				cmp	al,2
020A:227C  43					inc	bx
020A:227D  02 7C 04				add	bh,[si+4]
020A:2280  000A[00]				db	10 dup (0)
020A:228A  00			data_143	db	0
020A:228B  0E					push	cs
020A:228C  04 7F				add	al,7Fh
020A:228E  01 0E 0004				add	word ptr ds:[4],cx	; (020A:0004=808h)
020A:2292  00					db	0
020A:2293  00					db	0
020A:2294  00					db	0
020A:2295  00 00				add	[bx+si],al
020A:2297  00 43 3A				add	[bp+di+3Ah],al
020A:229A  5C					pop	sp
020A:229B  57					push	di
020A:229C  49					dec	cx
020A:229D  4E					dec	si
020A:229E  44					inc	sp
020A:229F  4F					dec	di
020A:22A0  57					push	di
020A:22A1  53					push	bx
020A:22A2  5C					pop	sp
020A:22A3  53					push	bx
020A:22A4  59					pop	cx
020A:22A5  53					push	bx
020A:22A6  54					push	sp
020A:22A7  45					inc	bp
020A:22A8  4D					dec	bp
020A:22A9  33 32				xor	si,[bp+si]
020A:22AB  5C					pop	sp
020A:22AC  43					inc	bx
020A:22AD  4D4F			data_144	dw	4D4Fh
020A:22AF  4D					dec	bp
020A:22B0  41					inc	cx
020A:22B1  444E			data_145	dw	444Eh
020A:22B3  432E			data_146	dw	432Eh
020A:22B5  4F					dec	di
020A:22B6  4D					dec	bp
020A:22B7  00 00 00 00 00 00			db	0, 0, 0, 0, 0, 0
020A:22BD  0000			data_148	dw	0
020A:22BF  00					db	0
020A:22C0  00					db	0
020A:22C1  00					db	0
020A:22C2  00					db	0
020A:22C3  00					db	0
020A:22C4  00					db	0
020A:22C5  00					db	0
020A:22C6  00					db	0
020A:22C7  00					db	0
020A:22C8  00					db	0
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 48

020A:22C9  00					db	0
020A:22CA  00					db	0
020A:22CB  00					db	0
020A:22CC  00					db	0
020A:22CD  00					db	0
020A:22CE  00					db	0
020A:22CF  00					db	0
020A:22D0  00					db	0
020A:22D1  00					db	0
020A:22D2  00					db	0
020A:22D3  00					db	0
020A:22D4  00					db	0
020A:22D5  00 00				add	[bx+si],al
020A:22D7  00 77 02				add	[bx+2],dh
020A:22DA  2C 01				sub	al,1
020A:22DC			loc_204:
020A:22DC  B4 95				mov	ah,95h
020A:22DE  01 00				add	[bx+si],ax
020A:22E0  00 03				add	[bp+di],al
020A:22E2  FF 9F 1EEE				call	data_124[bx]		;*(020A:1EEE=0)
020A:22E6  01 00				add	[bx+si],ax
020A:22E8  03 00				add	ax,[bx+si]
020A:22EA  01 00				add	[bx+si],ax
020A:22EC  01 01				add	[bx+di],ax
020A:22EE  01 00				add	[bx+si],ax
020A:22F0  01 00				add	[bx+si],ax
020A:22F2  00 00				add	[bx+si],al
020A:22F4  FF					db	0FFh
020A:22F5  FF 00				inc	word ptr [bx+si]
020A:22F7  0009[00]				db	9 dup (0)
020A:2300  0000			data_150	dw	0
020A:2302  04 31				add	al,31h			; '1'
020A:2304  0B A7 0000				or	sp,word ptr ds:[0][bx]	; (020A:0000=1828h)
020A:2308  00 00				add	[bx+si],al
020A:230A  00 E7				add	bh,ah
020A:230C  0C A7				or	al,0A7h
020A:230E  0058[00]				db	88 dup (0)
020A:2366  01 00				add	[bx+si],ax
020A:2368  00 00				add	[bx+si],al
020A:236A  01 00				add	[bx+si],ax
020A:236C  0007[00]				db	7 dup (0)
020A:2373  1E					push	ds
020A:2374  06					push	es
020A:2375  0E					push	cs
020A:2376  1F					pop	ds
020A:2377  8B 16 22BD				mov	dx,data_148		; (020A:22BD=0)
020A:237B  A1 22B1				mov	ax,data_145		; (020A:22B1=444Eh)
020A:237E  8B 1E 22AD				mov	bx,data_144		; (020A:22AD=4D4Fh)
020A:2382  8B 0E 22B3				mov	cx,data_146		; (020A:22B3=432Eh)
020A:2386  50					push	ax
020A:2387  53					push	bx
020A:2388  51					push	cx
020A:2389  8C DB				mov	bx,ds
020A:238B  8E C3				mov	es,bx
020A:238D  8B 1E 0593				mov	bx,word ptr ds:[593h]	; (020A:0593=3)
020A:2391  B4 4A				mov	ah,4Ah
020A:2393  CD 21				int	21h			; DOS Services  ah=function 4Ah
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 49

										;  change memory allocation
										;   bx=bytes/16, es=mem segment
020A:2395  80 3E 02B0 01			cmp	byte ptr ds:[2B0h],1	; (020A:02B0=1Dh)
020A:239A  75 33				jne	loc_205			; Jump if not equal
020A:239C  83 3E 0256 00			cmp	word ptr ds:[256h],0	; (020A:0256=0)
020A:23A1  74 2C				je	loc_205			; Jump if equal
020A:23A3  BB 0007				mov	bx,7
020A:23A6  B4 48				mov	ah,48h
020A:23A8  CD 21				int	21h			; DOS Services  ah=function 48h
										;  allocate memory, bx=bytes/16
020A:23AA  72 23				jc	loc_205			; Jump if carry Set
020A:23AC  8E C0				mov	es,ax
020A:23AE  33 FF				xor	di,di			; Zero register
020A:23B0  33 F6				xor	si,si			; Zero register
020A:23B2  1E					push	ds
020A:23B3  8E 1E 0256				mov	ds,word ptr ds:[256h]	; (020A:0256=0)
020A:23B7  B9 0021				mov	cx,21h
020A:23BA  83 C1 40				add	cx,40h
020A:23BD  FC					cld				; Clear direction
020A:23BE  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:23C0  1F					pop	ds
020A:23C1  8C C1				mov	cx,es
020A:23C3  8E 06 0256				mov	es,word ptr ds:[256h]	; (020A:0256=0)
020A:23C7  B4 49				mov	ah,49h
020A:23C9  CD 21				int	21h			; DOS Services  ah=function 49h
										;  release memory block, es=seg
020A:23CB  89 0E 0256				mov	word ptr ds:[256h],cx	; (020A:0256=0)
020A:23CF			loc_205:
020A:23CF  59					pop	cx
020A:23D0  5B					pop	bx
020A:23D1  5D					pop	bp
020A:23D2  B4 48				mov	ah,48h
020A:23D4  CD 21				int	21h			; DOS Services  ah=function 48h
										;  allocate memory, bx=bytes/16
020A:23D6  72 41				jc	loc_206			; Jump if carry Set
020A:23D8  A3 0458				mov	word ptr ds:[458h],ax	; (020A:0458=0C40Eh)
020A:23DB  A3 002C				mov	word ptr ds:[2Ch],ax	; (020A:002C=3A39h)
020A:23DE  8E C0				mov	es,ax
020A:23E0  80 3E 02B0 01			cmp	byte ptr ds:[2B0h],1	; (020A:02B0=1Dh)
020A:23E5  75 34				jne	loc_207			; Jump if not equal
020A:23E7  53					push	bx
020A:23E8  BB 0000				mov	bx,0
020A:23EB  C4					db	0C4h
020A:23EC  C4 54 0F				les	dx,dword ptr [si+0Fh]	; Load 32 bit ptr
020A:23EF  8B C3				mov	ax,bx
020A:23F1  5B					pop	bx
020A:23F2  3D 0000				cmp	ax,0
020A:23F5  74 24				je	loc_207			; Jump if equal
020A:23F7  03 D8				add	bx,ax
020A:23F9  B4 49				mov	ah,49h
020A:23FB  CD 21				int	21h			; DOS Services  ah=function 49h
										;  release memory block, es=seg
020A:23FD  B4 48				mov	ah,48h
020A:23FF  CD 21				int	21h			; DOS Services  ah=function 48h
										;  allocate memory, bx=bytes/16
020A:2401  72 75				jc	loc_210			; Jump if carry Set
020A:2403  A3 0458				mov	word ptr ds:[458h],ax	; (020A:0458=0C40Eh)
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 50

020A:2406  A3 002C				mov	word ptr ds:[2Ch],ax	; (020A:002C=3A39h)
020A:2409  8E C0				mov	es,ax
020A:240B  89 1E 22AD				mov	data_144,bx		; (020A:22AD=4D4Fh)
020A:240F  53					push	bx
020A:2410  C4					db	0C4h
020A:2411  C4 54 0F				les	dx,dword ptr [si+0Fh]	; Load 32 bit ptr
020A:2414  58					pop	ax
020A:2415  3B D8				cmp	bx,ax
020A:2417  76 0D				jbe	loc_208			; Jump if below or =
020A:2419			loc_206:
020A:2419  EB 5D				jmp	short loc_210		; (2478)
020A:241B			loc_207:
020A:241B  1E					push	ds
020A:241C  8E DD				mov	ds,bp
020A:241E  33 F6				xor	si,si			; Zero register
020A:2420  8B FE				mov	di,si
020A:2422  FC					cld				; Clear direction
020A:2423  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:2425  1F					pop	ds
020A:2426			loc_208:
020A:2426  80 3E 228A 00			cmp	data_143,0		; (020A:228A=0)
020A:242B  75 06				jne	loc_209			; Jump if not equal
020A:242D  8E C5				mov	es,bp
020A:242F  B4 49				mov	ah,49h
020A:2431  CD 21				int	21h			; DOS Services  ah=function 49h
										;  release memory block, es=seg
020A:2433			loc_209:
020A:2433  C6 06 029E 01			mov	byte ptr ds:[29Eh],1	; (020A:029E=0)
020A:2438  06					push	es
020A:2439  BE 2760				mov	si,2760h
020A:243C  BF 0000				mov	di,0
020A:243F  B9 A4AD				mov	cx,0A4ADh
020A:2442  BB FFFF				mov	bx,0FFFFh
020A:2445  B4 48				mov	ah,48h
020A:2447  CD 21				int	21h			; DOS Services  ah=function 48h
										;  allocate memory, bx=bytes/16
020A:2449  3B DA				cmp	bx,dx
020A:244B  72 2B				jb	loc_210			; Jump if below
020A:244D  B4 48				mov	ah,48h
020A:244F  CD 21				int	21h			; DOS Services  ah=function 48h
										;  allocate memory, bx=bytes/16
020A:2451  72 25				jc	loc_210			; Jump if carry Set
020A:2453  50					push	ax
020A:2454  03 C3				add	ax,bx
020A:2456  2B C2				sub	ax,dx
020A:2458  A3 029C				mov	word ptr ds:[29Ch],ax	; (020A:029C=0)
020A:245B  8E C0				mov	es,ax
020A:245D  58					pop	ax
020A:245E  03 F1				add	si,cx
020A:2460  4E					dec	si
020A:2461  03 F9				add	di,cx
020A:2463  4F					dec	di
020A:2464  FD					std				; Set direction flag
020A:2465  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020A:2467  FC					cld				; Clear direction
020A:2468  8E C0				mov	es,ax
020A:246A  B4 49				mov	ah,49h
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 51

020A:246C  CD 21				int	21h			; DOS Services  ah=function 49h
										;  release memory block, es=seg
020A:246E  C6 06 0330 00			mov	byte ptr ds:[330h],0	; (020A:0330=61h)
020A:2473  07					pop	es
020A:2474  1F					pop	ds
020A:2475  E9 FD47				jmp	loc_199			; (21BF)
020A:2478			loc_210:
020A:2478  E9 1DC0				jmp	$+1DC3h
020A:247B  0019[00]				db	25 dup (0)
020A:2494  33 03				xor	ax,[bp+di]
020A:2496  82 03 CC				add	byte ptr [bp+di],0CCh
020A:2499  04 80				add	al,80h
020A:249B  00 0E 5C04				add	byte ptr ds:[5C04h],cl	; (020A:5C04=51h)
020A:249F  00 0E 6C04				add	byte ptr ds:[6C04h],cl	; (020A:6C04=0AAh)
020A:24A3  00 0E 9304				add	byte ptr ds:[9304h],cl	; (020A:9304=0BEh)
020A:24A7  01 0E 0004				add	word ptr ds:[4],cx	; (020A:0004=808h)
020A:24AB  10 2F				adc	[bx],ch
020A:24AD  5C					pop	sp
020A:24AE  DC					db	0DCh
020A:24AF  01 0E 6B04				add	word ptr ds:[6B04h],cx	; (020A:6B04=0CB06h)
020A:24B3  01 0E 0004				add	word ptr ds:[4],cx	; (020A:0004=808h)
020A:24B7  00 C7				add	bh,al
020A:24B9  06					push	es
020A:24BA  00 00				add	[bx+si],al
020A:24BC  5C					pop	sp
020A:24BD  5C					pop	sp
020A:24BE  56					push	si
020A:24BF  4D					dec	bp
020A:24C0  57					push	di
020A:24C1  41					inc	cx
020A:24C2  52					push	dx
020A:24C3  45					inc	bp
020A:24C4  2D 4F48				sub	ax,4F48h
020A:24C7  53					push	bx
020A:24C8  54					push	sp
020A:24C9  5C					pop	sp
020A:24CA  53					push	bx
020A:24CB  48					dec	ax
020A:24CC  41					inc	cx
020A:24CD  52					push	dx
020A:24CE  45					inc	bp
020A:24CF  44					inc	sp
020A:24D0  20 46 4F				and	[bp+4Fh],al
020A:24D3  4C					dec	sp
020A:24D4  44					inc	sp
020A:24D5  45					inc	bp
020A:24D6  52					push	dx
020A:24D7  53					push	bx
020A:24D8  5C					pop	sp
020A:24D9  90					nop
020A:24DA  80 81 7E8E 31			add	byte ptr ds:[7E8Eh][bx+di],31h	; (020A:7E8E=8Bh) '1'
020A:24DF  31 36 4F5C				xor	word ptr ds:[4F5Ch],si	; (020A:4F5C=2EEDh)
020A:24E3  53					push	bx
020A:24E4  5C					pop	sp
020A:24E5  8B 80 5F81				mov	ax,word ptr ds:[5F81h][bx+si]	; (020A:5F81=8030h)
020A:24E9  7E 45				jle	loc_211			; Jump if < or =
020A:24EB  38 41 5C				cmp	[bx+di+5Ch],al
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 52

020A:24EE  53					push	bx
020A:24EF  52					push	dx
020A:24F0  2E					db	2Eh
020A:24F1  45					inc	bp
020A:24F2  58					pop	ax
020A:24F3  45					inc	bp
020A:24F4  00D9[00]				db	217 dup (0)
020A:25CD  66					db	66h
020A:25CE  00 D9				add	cl,bl
020A:25D0  02 46 0B				add	al,[bp+0Bh]
020A:25D3  B5 00				mov	ch,0
020A:25D5  0042[00]				db	66 dup (0)
020A:2617  63					db	63h
020A:2618  0D 0094				or	ax,94h
020A:261B  00 00				add	[bx+si],al
020A:261D  00 E7				add	bh,ah
020A:261F  0C C5				or	al,0C5h
020A:2621  22 0C				and	cl,[si]
020A:2623  94					xchg	sp,ax
020A:2624  EA 1022:EA22		;*		jmp	far ptr loc_342		;*(1022:EA22)
020A:2624  EA					db	0EAh
020A:2625  EA22 1022				dw	0EA22h, 1022h
							                        ;* No entry point to code
020A:2629  07					pop	es
020A:262A  00 07				add	[bx],al
020A:262C  D9					db	0D9h
020A:262D  02 01				add	al,[bx+di]
020A:262F  00 D9				add	cl,bl
020A:2631  02 47 01				add	al,[bx+1]
020A:2634  D9					db	0D9h

020A:2635			locloop_213:
020A:2635  02 24				add	ah,[si]
020A:2637  25 95B4				and	ax,95B4h
020A:263A  00 3E 98FE				add	byte ptr ds:[98FEh],bh	; (020A:98FE=5)
020A:263E  0E					push	cs
020A:263F  04 00				add	al,0
020A:2641  00 00				add	[bx+si],al
020A:2643  01 00				add	[bx+si],ax
020A:2645  01 81 0E00				add	data_96[bx+di],ax	; (020A:0E00=5057h)
020A:2649  04 0E				add	al,0Eh
020A:264B  04 DE				add	al,0DEh
020A:264D  01 0E 4604				add	word ptr ds:[4604h],cx	; (020A:4604=8018h)
020A:2651  32 00				xor	al,[bx+si]
020A:2653  00 00				add	[bx+si],al
020A:2655  41					inc	cx
020A:2656  52					push	dx
020A:2657  49					dec	cx
020A:2658  46					inc	si
020A:2659  59					pop	cx
020A:265A  4E					dec	si
020A:265B  0C 41				or	al,41h			; 'A'
020A:265D  62					db	62h
020A:265E  6F					db	6Fh
020A:265F  72 74				jc	loc_225			; Jump if carry Set
020A:2661  20 28				and	[bx+si],ch
020A:2663  E1 E2		;*		loopz	locloop_215		;*Loop if zf=1, cx>0
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 53


020A:2663  E1 E2				db	0E1h,0E2h
020A:2665  AE					scasb				; Scan es:[di] for al
020A:2666  AF					scasw				; Scan es:[di] for ax
020A:2667  29 10				sub	[bx+si],dx
020A:2669  2C 20				sub	al,20h			; ' '
020A:266B			loc_216:
020A:266B  52					push	dx
020A:266C  65					db	65h
020A:266D  74 72				jz	loc_226			; Jump if zero
020A:266F  79 20				jns	loc_219			; Jump if not sign
020A:2671  28 AF A2AE				sub	byte ptr ds:[0A2AEh][bx],ch	; (020A:A2AE=53h)
020A:2675  E2 AE		;*		loop	locloop_212		;*Loop if cx > 0

020A:2675  E2 AE				db	0E2h,0AEh
020A:2677  E0 29				loopnz	locloop_221		; Loop if zf=0, cx>0

020A:2679  12 2C				adc	ch,[si]
020A:267B  20 49 67				and	[bx+di+67h],cl
020A:267E  6E					db	6Eh
020A:267F  6F					db	6Fh
020A:2680  6572 2820		data_156	dw	6572h, 2820h
020A:2684  AF					scasw				; Scan es:[di] for ax
020A:2685  E0 AE				loopnz	locloop_213		; Loop if zf=0, cx>0

020A:2687  AF					scasw				; Scan es:[di] for ax
020A:2688  E3 E1				jcxz	loc_216			; Jump if cx=0
020A:268A  AA					stosb				; Store al to es:[di]
020A:268B  29 0E 202C				sub	word ptr ds:[202Ch],cx	; (020A:202C=0)
020A:268F  46					inc	si
020A:2690  61					db	61h
020A:2691			loc_219:
020A:2691  69					db	69h
020A:2692  6C					db	6Ch
020A:2693  20 28				and	[bx+si],ch
020A:2695  E1 A1		;*		loopz	locloop_214		;*Loop if zf=1, cx>0

020A:2695  E1 A1				db	0E1h,0A1h
020A:2697  E0 AE		;*		loopnz	locloop_215		;*Loop if zf=0, cx>0

020A:2697  E0 AE				db	0E0h,0AEh
020A:2699  E1 29				loopz	locloop_224		; Loop if zf=1, cx>0

020A:269B  01 3F				add	[bx],di
020A:269D  07					pop	es
020A:269E  E7 E2				out	0E2h,ax			; port 0E2h ??I/O Non-standard
020A:26A0  A5					movsw				; Mov [si] to es:[di]
020A:26A1  AD					lodsw				; String [si] to ax

020A:26A2			locloop_221:
020A:26A2  A8 A5				test	al,0A5h

020A:26A4			locloop_223:
020A:26A4  00 07				add	[bx],al
020A:26A6  A7					cmpsw				; Cmp [si] to es:[di]
020A:26A7  A0 A8AF				mov	al,byte ptr ds:[0A8AFh]	; (020A:A8AF=0CBh)
020A:26AA  E1 EC		;*		loopz	locloop_220		;*Loop if zf=1, cx>0
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 54


020A:26AA  E1 EC				db	0E1h,0ECh
020A:26AC  00 0D				add	[di],cl
020A:26AE  20 25				and	[di],ah
020A:26B0  31 20				xor	[bx+si],sp
020A:26B2  A4					movsb				; Mov [si] to es:[di]
020A:26B3  A8 E1				test	al,0E1h
020A:26B5  AA					stosb				; Store al to es:[di]
020A:26B6  20 25				and	[di],ah
020A:26B8  32 0D				xor	cl,[di]
020A:26BA  0A 13				or	dl,[bp+di]
020A:26BC  20 25				and	[di],ah
020A:26BE  31 20				xor	[bx+si],sp
020A:26C0  E3 E1		;*		jcxz	loc_222			;*Jump if cx=0
020A:26C0  E3 E1				db	0E3h,0E1h
020A:26C2  E2 E0				loop	locloop_223		; Loop if cx > 0


020A:26C4			locloop_224:
020A:26C4  AE					scasb				; Scan es:[di] for al
020A:26C5  A9 E2E1				test	ax,0E2E1h
020A:26C8  A2 20AE				mov	byte ptr data_135,al	; (020A:20AE=20h)
020A:26CB  25 0D32				and	ax,0D32h
020A:26CE  0A 27				or	ah,[bx]
020A:26D0  82 E1 E2				and	cl,0E2h
020A:26D3  A0 ECA2				mov	al,byte ptr ds:[0ECA2h]	; (020A:ECA2=44h)
020A:26D6  E2 A5		;*		loop	locloop_217		;*Loop if cx > 0

020A:26D6  E2 A5				db	0E2h,0A5h
020A:26D8  20 E2				and	dl,ah
020A:26DA  AE					scasb				; Scan es:[di] for al
020A:26DB  AC					lodsb				; String [si] to al
020A:26DC  20 25				and	[di],ah
020A:26DE  31 2C				xor	[si],bp
020A:26E0  20 E1				and	cl,ah
020A:26E2  A5					movsw				; Mov [si] to es:[di]
020A:26E3  E0 A8		;*		loopnz	locloop_218		;*Loop if zf=0, cx>0

020A:26E3  E0 A8				db	0E0h,0A8h

020A:26E5			locloop_227:
020A:26E5  A9 EBAD				test	ax,0EBADh
020A:26E8  A9 AD20				test	ax,0AD20h
020A:26EB  AE					scasb				; Scan es:[di] for al
020A:26EC  AC					lodsb				; String [si] to al
020A:26ED  A5					movsw				; Mov [si] to es:[di]
020A:26EE  E0 20				loopnz	locloop_229		; Loop if zf=0, cx>0

020A:26F0  25 2D32				and	ax,2D32h
020A:26F3  25 0D33				and	ax,0D33h
020A:26F6  0A 37				or	dh,[bx]

020A:26F8			locloop_228:
020A:26F8  88 E1				mov	cl,ah
020A:26FA  AF					scasw				; Scan es:[di] for ax
020A:26FB  AE					scasb				; Scan es:[di] for al
020A:26FC  E0 E7				loopnz	locloop_227		; Loop if zf=0, cx>0
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 55


020A:26FE  A5					movsw				; Mov [si] to es:[di]
020A:26FF  AD					lodsw				; String [si] to ax
020A:2700  A0 E220				mov	al,byte ptr ds:[0E220h]	; (020A:E220=0DEh)
020A:2703  A0 ABA1				mov	al,byte ptr ds:[0ABA1h]	; (020A:ABA1=3Eh)
020A:2706  A8 E6				test	al,0E6h
020A:2708  A0 E020				mov	al,byte ptr ds:[0E020h]	; (020A:E020=96h)
020A:270B  A0 ACA7				mov	al,byte ptr ds:[0ACA7h]	; (020A:ACA7=0)
020A:270E  A5					movsw				; Mov [si] to es:[di]
020A:270F  E9 ADA5				jmp	$-5258h
							                        ;* No entry point to code
020A:2712  A8 EF				test	al,0EFh
020A:2714  20 E4				and	ah,ah
020A:2716  A0 ABA9				mov	al,byte ptr ds:[0ABA9h]	; (020A:ABA9=0F0h)
020A:2719  AE					scasb				; Scan es:[di] for al
020A:271A  A2 2820				mov	data_157,al		; (020A:2820=0ADh)
020A:271D  46					inc	si
020A:271E  41					inc	cx
020A:271F  54					push	sp
020A:2720  29 20				sub	[bx+si],sp
020A:2722  AD					lodsw				; String [si] to ax
020A:2723  A0 A420				mov	al,byte ptr ds:[0A420h]	; (020A:A420=3Bh)
020A:2726  A8 E1				test	al,0E1h
020A:2728  AA					stosb				; Store al to es:[di]
020A:2729  A5					movsw				; Mov [si] to es:[di]
020A:272A  20 25				and	[di],ah
020A:272C  31 0D				xor	[di],cx
020A:272E  0A 1A				or	bl,[bp+si]
020A:2730  8D A5 E0AF				lea	sp,cs:[0E0AFh][di]	; Load effective addr
020A:2734  A0 A8A2				mov	al,byte ptr ds:[0A8A2h]	; (020A:A8A2=1)
020A:2737  AB					stosw				; Store ax to es:[di]
020A:2738  EC					in	al,dx			; port 0BF04h ??I/O Non-standard
020A:2739  AD					lodsw				; String [si] to ax
020A:273A  EB A9				jmp	short locloop_227	; (26E5)
020A:273C  20 43 4F				and	[bp+di+4Fh],al
020A:273F  4D					dec	bp
020A:2740  4D					dec	bp
020A:2741  41					inc	cx
020A:2742  4E					dec	si
020A:2743  44					inc	sp
020A:2744  2E					db	2Eh
020A:2745  43					inc	bx
020A:2746  4F					dec	di
020A:2747  4D					dec	bp
020A:2748  0D 220A				or	ax,220Ah
020A:274B  82 E1 E2				and	cl,0E2h
020A:274E  A0 ECA2				mov	al,byte ptr ds:[0ECA2h]	; (020A:ECA2=44h)
020A:2751  E2 A5				loop	locloop_228		; Loop if cx > 0

020A:2753  20 A4 E1A8				and	byte ptr ds:[0E1A8h][si],ah	; (020A:E1A8=0Bh)
020A:2757  AA					stosb				; Store al to es:[di]
020A:2758  20 E1				and	cl,ah
020A:275A  20 25				and	[di],ah
020A:275C  31 20				xor	[bx+si],sp
020A:275E  A2 A420				mov	byte ptr ds:[0A420h],al	; (020A:A420=3Bh)
020A:2761  A8 E1				test	al,0E1h
020A:2763  AA					stosb				; Store al to es:[di]
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 56

020A:2764  AE					scasb				; Scan es:[di] for al
020A:2765  A2 A4AE				mov	byte ptr ds:[0A4AEh],al	; (020A:A4AE=1Fh)
020A:2768  20 25				and	[di],ah
020A:276A  32 0D				xor	cl,[di]
020A:276C			loc_235:
020A:276C  0A 1A				or	bl,[bp+si]
020A:276E  8D A0 ACA6				lea	sp,cs:[0ACA6h][bx+si]	; Load effective addr
020A:2772  A8 E2				test	al,0E2h
020A:2774  A5					movsw				; Mov [si] to es:[di]
020A:2775  20 AB A1EE				and	[bp+di-5E12h],ch
020A:2779  E3 EE		;*		jcxz	loc_234			;*Jump if cx=0
020A:2779  E3 EE				db	0E3h,0EEh
020A:277B  20 AA A0AB				and	[bp+si-5F55h],ch
020A:277F  A2 E8A8				mov	byte ptr ds:[0E8A8h],al	; (020A:E8A8=8)
020A:2782  E3 2E				jcxz	loc_238			; Jump if cx=0
020A:2784  2E					db	2Eh
020A:2785  2E					db	2Eh
020A:2786  0D 390A				or	ax,390Ah
020A:2789  0D 8F0A				or	ax,8F0Ah
020A:278C  E0 A5		;*		loopnz	locloop_231		;*Loop if zf=0, cx>0

020A:278C  E0 A5				db	0E0h,0A5h
020A:278E  AA					stosb				; Store al to es:[di]
020A:278F  E0 A0		;*		loopnz	locloop_230		;*Loop if zf=0, cx>0

020A:278F  E0 A0				db	0E0h,0A0h
020A:2791  E2 A8		;*		loop	locloop_232		;*Loop if cx > 0

020A:2791  E2 A8				db	0E2h,0A8h
020A:2793  E2 EC		;*		loop	locloop_236		;*Loop if cx > 0

020A:2793  E2 EC				db	0E2h,0ECh
020A:2795  20 A2 AFEB				and	[bp+si-5015h],ah
020A:2799  AE					scasb				; Scan es:[di] for al
020A:279A  AB					stosw				; Store ax to es:[di]
020A:279B  AD					lodsw				; String [si] to ax
020A:279C  A5					movsw				; Mov [si] to es:[di]
020A:279D  AD					lodsw				; String [si] to ax
020A:279E  A8 A5				test	al,0A5h
020A:27A0  20 AF AAA0				and	byte ptr ds:[0AAA0h][bx],ch	; (020A:AAA0=8Bh)
020A:27A4  A5					movsw				; Mov [si] to es:[di]
020A:27A5  E2 AD		;*		loop	locloop_233		;*Loop if cx > 0

020A:27A5  E2 AD				db	0E2h,0ADh
020A:27A7  AE					scasb				; Scan es:[di] for al
020A:27A8  A3 20AE				mov	data_135,ax		; (020A:20AE=2020h)
020A:27AB  A7					cmpsw				; Cmp [si] to es:[di]
020A:27AC  A0 A0A4				mov	al,byte ptr ds:[0A0A4h]	; (020A:A0A4=7)
020A:27AF  AD					lodsw				; String [si] to ax
020A:27B0  A8 EF				test	al,0EFh
020A:27B2			loc_238:
020A:27B2  20 5B 59				and	[bp+di+59h],bl
020A:27B5  28 A4 29A0				sub	data_158[si],ah		; (020A:29A0=0AAh)

020A:27B9			locloop_239:
020A:27B9  2F					das				; Decimal adjust
020A:27BA  4E					dec	si
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 57

020A:27BB  28 AD E2A5				sub	byte ptr ds:[0E2A5h][di],ch	; (020A:E2A5=30h)
020A:27BF  29 5D 3F				sub	[di+3Fh],bx
020A:27C2  19 8D 20A5				sbb	data_133[di],cx		; (020A:20A5=2020h)
020A:27C6  E3 A4				jcxz	loc_235			; Jump if cx=0
020A:27C8  A0 E2A5				mov	al,byte ptr ds:[0E2A5h]	; (020A:E2A5=30h)
020A:27CB  E1 EF		;*		loopz	locloop_240		;*Loop if zf=1, cx>0

020A:27CB  E1 EF				db	0E1h,0EFh
020A:27CD  20 A2 AFEB				and	[bp+si-5015h],ah
020A:27D1  AE					scasb				; Scan es:[di] for al

020A:27D2			locloop_242:
020A:27D2  AB					stosw				; Store ax to es:[di]
020A:27D3  AD					lodsw				; String [si] to ax
020A:27D4  A8 E2				test	al,0E2h
020A:27D6  EC					in	al,dx			; port 0BF04h ??I/O Non-standard
020A:27D7  20 25				and	[di],ah
020A:27D9  31 0D				xor	[di],cx

020A:27DB			locloop_243:
020A:27DB  0A 14				or	dl,[si]

020A:27DD			locloop_244:
020A:27DD  8E					db	8Eh
020A:27DE  E8 A1A8				call	$-5E55h
020A:27E1  AA					stosb				; Store al to es:[di]
020A:27E2  A0 A220				mov	al,byte ptr ds:[0A220h]	; (020A:A220=1Ch)
020A:27E5  20 45 58				and	[di+58h],al

020A:27E8			locloop_245:
020A:27E8  45					inc	bp
020A:27E9  2D A0E4				sub	ax,0A0E4h
020A:27EC  A9 A5AB				test	ax,0A5ABh
020A:27EF  0D 210A				or	ax,210Ah
020A:27F2  8F					db	8Fh
020A:27F3  E0 AE		;*		loopnz	locloop_237		;*Loop if zf=0, cx>0

020A:27F3  E0 AE				db	0E0h,0AEh
020A:27F5  A3 A0E0				mov	word ptr ds:[0A0E0h],ax	; (020A:A0E0=0CB41h)
020A:27F8  AC					lodsb				; String [si] to al
020A:27F9  AC					lodsb				; String [si] to al
020A:27FA  A0 AD20				mov	al,byte ptr ds:[0AD20h]	; (020A:AD20=77h)
020A:27FD  A5					movsw				; Mov [si] to es:[di]
020A:27FE  20 E3				and	bl,ah
020A:2800  AC					lodsb				; String [si] to al
020A:2801  A5					movsw				; Mov [si] to es:[di]
020A:2802  E9 A5A0				jmp	$-5A5Dh
020A:2805  E2 E1				loop	locloop_245		; Loop if cx > 0

020A:2807  EF					out	dx,ax			; port 0BF65h ??I/O Non-standard
020A:2808			loc_246:
020A:2808  20 A2 AF20				and	[bp+si-50E0h],ah
020A:280C  A0 EFAC				mov	al,byte ptr ds:[0EFACh]	; (020A:EFAC=75h)
020A:280F  E2 A8				loop	locloop_239		; Loop if cx > 0

020A:2811  0D 230A				or	ax,230Ah
020A:2814  0D 8D0A				or	ax,8D0Ah
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 58

020A:2817  A5					movsw				; Mov [si] to es:[di]
020A:2818  E2 20				loop	locloop_251		; Loop if cx > 0

020A:281A  E1 A2		;*		loopz	locloop_241		;*Loop if zf=1, cx>0

020A:281A  E1 A2				db	0E1h,0A2h
020A:281C  AE					scasb				; Scan es:[di] for al
020A:281D  A1 A4AE				mov	ax,word ptr ds:[0A4AEh]	; (020A:A4AE=0A91Fh)
020A:2820  AD			data_157	db	0ADh
020A:2821  EB E5				jmp	short loc_246		; (2808)
							                        ;* No entry point to code
020A:2823  20 A4 E1A5				and	byte ptr ds:[0E1A5h][si],ah	; (020A:E1A5=4Eh)
020A:2827  AA					stosb				; Store al to es:[di]
020A:2828  E0 A8				loopnz	locloop_242		; Loop if zf=0, cx>0

020A:282A  AF					scasw				; Scan es:[di] for ax
020A:282B  E2 AE				loop	locloop_243		; Loop if cx > 0

020A:282D  E0 AE				loopnz	locloop_244		; Loop if zf=0, cx>0


020A:282F			locloop_249:
020A:282F  A2 E420				mov	byte ptr ds:[0E420h],al	; (020A:E420=8Ah)
020A:2832  A0 ABA9				mov	al,byte ptr ds:[0ABA9h]	; (020A:ABA9=0F0h)
020A:2835  AE					scasb				; Scan es:[di] for al
020A:2836  A2 AD24				mov	byte ptr ds:[0AD24h],al	; (020A:AD24=0)
020A:2839  A5					movsw				; Mov [si] to es:[di]

020A:283A			locloop_251:
020A:283A  AF					scasw				; Scan es:[di] for ax
020A:283B  E0 A0				loopnz	locloop_244		; Loop if zf=0, cx>0

020A:283D  A2 ABA8				mov	byte ptr ds:[0ABA8h],al	; (020A:ABA8=6)
020A:2840  EC					in	al,dx			; port 0BF65h ??I/O Non-standard
020A:2841  AD					lodsw				; String [si] to ax
020A:2842  A0 20EF				mov	al,data_138		; (020A:20EF=0A0h)
020A:2845  AA					stosb				; Store al to es:[di]
020A:2846  AE					scasb				; Scan es:[di] for al

020A:2847			locloop_252:
020A:2847  AC					lodsb				; String [si] to al
020A:2848  A0 A4AD				mov	al,byte ptr ds:[0A4ADh]	; (020A:A4AD=0EBh)
020A:284B  A0 A820				mov	al,byte ptr ds:[0A820h]	; (020A:A820=4Dh)
020A:284E  AB					stosw				; Store ax to es:[di]
020A:284F  A8 20				test	al,20h			; ' '
020A:2851  A8 AC				test	al,0ACh
020A:2853  EF					out	dx,ax			; port 0BF65h ??I/O Non-standard
020A:2854  20 E4				and	ah,ah

020A:2856			locloop_253:
020A:2856  A0 ABA9				mov	al,byte ptr ds:[0ABA9h]	; (020A:ABA9=0F0h)
020A:2859  A0 0A0D				mov	al,data_90		; (020A:0A0D=0)
020A:285C  0C 8D				or	al,8Dh
020A:285E  A5					movsw				; Mov [si] to es:[di]
020A:285F  E2 20				loop	locloop_256		; Loop if cx > 0

020A:2861  A4					movsb				; Mov [si] to es:[di]
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 59

020A:2862  AE					scasb				; Scan es:[di] for al
020A:2863  E1 E2				loopz	locloop_252		; Loop if zf=1, cx>0

020A:2865  E3 AF		;*		jcxz	loc_247			;*Jump if cx=0
020A:2865  E3 AF				db	0E3h,0AFh
020A:2867  A0 1D20				mov	al,data_117		; (020A:1D20=0)
020A:286A  0D 8E0A				or	ax,8E0Ah
020A:286D  E8 A1A8				call	$-5E55h
020A:2870  AA					stosb				; Store al to es:[di]
020A:2871  A0 AF20				mov	al,byte ptr ds:[0AF20h]	; (020A:AF20=0E9h)
020A:2874  E0 A8		;*		loopnz	locloop_248		;*Loop if zf=0, cx>0

020A:2874  E0 A8				db	0E0h,0A8h
020A:2876  20 A2 A4EB				and	[bp+si-5B15h],ah
020A:287A  A5					movsw				; Mov [si] to es:[di]
020A:287B  AB					stosw				; Store ax to es:[di]
020A:287C  A5					movsw				; Mov [si] to es:[di]

020A:287D			locloop_254:
020A:287D  AD					lodsw				; String [si] to ax

020A:287E			locloop_255:
020A:287E  A8 A8				test	al,0A8h
020A:2880  20 AF ACA0				and	byte ptr ds:[0ACA0h][bx],ch	; (020A:ACA0=96h)
020A:2884  EF					out	dx,ax			; port 0BF65h ??I/O Non-standard
020A:2885  E2 A8				loop	locloop_249		; Loop if cx > 0

020A:2887  39 0D				cmp	[di],cx
020A:2889  0A 8D 20A5				or	cl,byte ptr data_133[di]	; (020A:20A5=20h)
020A:288D  E3 A4		;*		jcxz	loc_250			;*Jump if cx=0
020A:288D  E3 A4				db	0E3h,0A4h
020A:288F  A0 E2A5				mov	al,byte ptr ds:[0E2A5h]	; (020A:E2A5=30h)

020A:2892			locloop_258:
020A:2892  E1 EF		;*		loopz	locloop_257		;*Loop if zf=1, cx>0

020A:2892  E1 EF				db	0E1h,0EFh
020A:2894  20 A7 A3A0				and	byte ptr ds:[0A3A0h][bx],ah	; (020A:A3A0=1Eh)
020A:2898  E0 E3				loopnz	locloop_254		; Loop if zf=0, cx>0

020A:289A  A7					cmpsw				; Cmp [si] to es:[di]
020A:289B  A8 E2				test	al,0E2h
020A:289D  EC					in	al,dx			; port 0BF65h ??I/O Non-standard
020A:289E  20 43 4F				and	[bp+di+4Fh],al
020A:28A1  4D					dec	bp
020A:28A2  4D					dec	bp

020A:28A3			locloop_260:
020A:28A3  41					inc	cx

020A:28A4			locloop_261:
020A:28A4  4E					dec	si
020A:28A5  44					inc	sp
020A:28A6  2E					db	2Eh
020A:28A7  43					inc	bx
020A:28A8  4F					dec	di
020A:28A9  4D					dec	bp
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 60

020A:28AA  2C 20				sub	al,20h			; ' '
020A:28AC  E1 A8				loopz	locloop_253		; Loop if zf=1, cx>0

020A:28AE  E1 E2				loopz	locloop_258		; Loop if zf=1, cx>0

020A:28B0  A5					movsw				; Mov [si] to es:[di]
020A:28B1  AC					lodsb				; String [si] to al
020A:28B2  A0 AE20				mov	al,byte ptr ds:[0AE20h]	; (020A:AE20=0Ch)

020A:28B5			locloop_262:
020A:28B5  E1 E2		;*		loopz	locloop_259		;*Loop if zf=1, cx>0

020A:28B5  E1 E2				db	0E1h,0E2h
020A:28B7  A0 AEAD				mov	al,byte ptr ds:[0AEADh]	; (020A:AEAD=10h)
020A:28BA  A2 A5AB				mov	byte ptr ds:[0A5ABh],al	; (020A:A5AB=0A1h)

020A:28BD			locloop_263:
020A:28BD  AD					lodsw				; String [si] to ax
020A:28BE  A0 0A0D				mov	al,data_90		; (020A:0A0D=0)
020A:28C1  37					aaa				; Ascii adjust
020A:28C2  0D 8D0A				or	ax,8D0Ah
020A:28C5  A5					movsw				; Mov [si] to es:[di]
020A:28C6  20 E3				and	bl,ah
020A:28C8  A4					movsb				; Mov [si] to es:[di]
020A:28C9  A0 E2A5				mov	al,byte ptr ds:[0E2A5h]	; (020A:E2A5=30h)
020A:28CC  E1 EF				loopz	locloop_263		; Loop if zf=1, cx>0


020A:28CE			locloop_265:
020A:28CE  20 A7 AFA0				and	byte ptr ds:[0AFA0h][bx],ah	; (020A:AFA0=2Eh)
020A:28D2  E3 E1				jcxz	locloop_262		; Jump if cx=0

020A:28D4			locloop_266:
020A:28D4  E2 A8				loop	locloop_255		; Loop if cx > 0

020A:28D6  E2 EC		;*		loop	locloop_264		;*Loop if cx > 0

020A:28D6  E2 EC				db	0E2h,0ECh
020A:28D8  20 43 4F				and	[bp+di+4Fh],al
020A:28DB  4D					dec	bp
020A:28DC  4D					dec	bp
020A:28DD  41					inc	cx
020A:28DE  4E					dec	si
020A:28DF  44					inc	sp
020A:28E0  2E					db	2Eh
020A:28E1  43					inc	bx

020A:28E2			locloop_267:
020A:28E2  4F					dec	di
020A:28E3  4D					dec	bp
020A:28E4  2C 20				sub	al,20h			; ' '
020A:28E6  A7					cmpsw				; Cmp [si] to es:[di]
020A:28E7  A0 A5A2				mov	al,byte ptr ds:[0A5A2h]	; (020A:A5A2=6)
020A:28EA  E0 E8				loopnz	locloop_266		; Loop if zf=0, cx>0


020A:28EC			locloop_268:
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 61

020A:28EC  A5					movsw				; Mov [si] to es:[di]
020A:28ED  AD					lodsw				; String [si] to ax
020A:28EE  A8 A5				test	al,0A5h
020A:28F0  20 E0				and	al,ah
020A:28F2  A0 AEA1				mov	al,byte ptr ds:[0AEA1h]	; (020A:AEA1=4Ah)
020A:28F5  E2 EB				loop	locloop_267		; Loop if cx > 0

020A:28F7			loc_269:
020A:28F7  0D 3B0A				or	ax,3B0Ah
020A:28FA  0D 8F0A				or	ax,8F0Ah
020A:28FD  E0 A5				loopnz	locloop_261		; Loop if zf=0, cx>0

020A:28FF  E0 A2				loopnz	locloop_260		; Loop if zf=0, cx>0

020A:2901  A0 20AD				mov	al,byte ptr ds:[20ADh]	; (020A:20AD=20h)
020A:2904  AF					scasw				; Scan es:[di] for ax
020A:2905  E0 AE				loopnz	locloop_262		; Loop if zf=0, cx>0

020A:2907  E6 A5				out	0A5h,al			; port 0A5h ??I/O Non-standard
020A:2909  E1 E1				loopz	locloop_268		; Loop if zf=1, cx>0

020A:290B  20 A2 E0A5				and	[bp+si-1F5Bh],ah
020A:290F  E5 AD				in	ax,0ADh			; port 0ADh ??I/O Non-standard
020A:2911  A5					movsw				; Mov [si] to es:[di]
020A:2912  A3 20AE				mov	data_135,ax		; (020A:20AE=2020h)
020A:2915  E3 E0				jcxz	loc_269			; Jump if cx=0
020A:2917  AE					scasb				; Scan es:[di] for al
020A:2918  A2 EFAD				mov	byte ptr ds:[0EFADh],al	; (020A:EFAD=42h)
020A:291B  2C 20				sub	al,20h			; ' '
020A:291D  AF					scasw				; Scan es:[di] for ax
020A:291E  E0 AE				loopnz	locloop_265		; Loop if zf=0, cx>0

020A:2920  A4					movsb				; Mov [si] to es:[di]
020A:2921  AE					scasb				; Scan es:[di] for al
020A:2922  AB					stosw				; Store ax to es:[di]
020A:2923  A6					cmpsb				; Cmp [si] to es:[di]
020A:2924  A5					movsw				; Mov [si] to es:[di]

020A:2925			locloop_271:
020A:2925  AD					lodsw				; String [si] to ax
020A:2926  A8 A5				test	al,0A5h
020A:2928  20 AD A2A5				and	byte ptr ds:[0A2A5h][di],ch	; (020A:A2A5=3)
020A:292C  AE					scasb				; Scan es:[di] for al
020A:292D  A7					cmpsw				; Cmp [si] to es:[di]
020A:292E  AC					lodsb				; String [si] to al
020A:292F  AE					scasb				; Scan es:[di] for al
020A:2930  A6					cmpsb				; Cmp [si] to es:[di]
020A:2931  AD					lodsw				; String [si] to ax
020A:2932  AE					scasb				; Scan es:[di] for al
020A:2933  0D 020A				or	ax,20Ah
020A:2936  0D 580A				or	ax,580Ah
020A:2939  0F			;*		pop	cs			; Dangerous-8088 only
020A:2939  0F					db	0Fh
020A:293A  01 00				add	[bx+si],ax
020A:293C  87 0C				xchg	[si],cx
020A:293E  01 00				add	[bx+si],ax
020A:2940  58					pop	ax
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 62

020A:2941			loc_272:
020A:2941  0F			;*		pop	cs			; Dangerous-8088 only
020A:2941  0F					db	0Fh
020A:2942  01 00				add	[bx+si],ax
020A:2944  00					db	0

020A:2945			locloop_273:
020A:2945  00 00				add	[bx+si],al
020A:2947  00 89 0E01				add	byte ptr data_96+1[bx+di],cl	; (020A:0E01=50h)
020A:294B  04 17				add	al,17h
020A:294D  8E					db	8Eh
020A:294E  E8 A1A8				call	$-5E55h
020A:2951  AA					stosb				; Store al to es:[di]
020A:2952  A0 A720				mov	al,byte ptr ds:[0A720h]	; (020A:A720=3Bh)

020A:2955			locloop_275:
020A:2955  A0 A8E9				mov	al,byte ptr ds:[0A8E9h]	; (020A:A8E9=0C6h)
020A:2958  E2 EB				loop	locloop_273		; Loop if cx > 0

020A:295A  20 AE 20E2				and	[bp+20E2h],ch
020A:295E  A7					cmpsw				; Cmp [si] to es:[di]
020A:295F  A0 A8AF				mov	al,byte ptr ds:[0A8AFh]	; (020A:A8AF=0CBh)

020A:2962			locloop_277:
020A:2962  E1 A8		;*		loopz	locloop_270		;*Loop if zf=1, cx>0

020A:2962  E1 A8				db	0E1h,0A8h
020A:2964  17					pop	ss
020A:2965  8D A5 E0AF				lea	sp,cs:[0E0AFh][di]	; Load effective addr
020A:2969  A0 A8A2				mov	al,byte ptr ds:[0A8A2h]	; (020A:A8A2=1)

020A:296C			locloop_278:
020A:296C  AB					stosw				; Store ax to es:[di]
020A:296D  EC					in	al,dx			; port 0BF65h ??I/O Non-standard
020A:296E			loc_279:
020A:296E  AD					lodsw				; String [si] to ax
020A:296F  AE					scasb				; Scan es:[di] for al
020A:2970  A5					movsw				; Mov [si] to es:[di]
020A:2971  20 E3				and	bl,ah
020A:2973  E1 E2		;*		loopz	locloop_276		;*Loop if zf=1, cx>0

020A:2973  E1 E2				db	0E1h,0E2h
020A:2975  E0 AE				loopnz	locloop_271		; Loop if zf=0, cx>0

020A:2977  A9 E2E1				test	ax,0E2E1h
020A:297A  A2 0EAE				mov	byte ptr ds:[0EAEh],al	; (020A:0EAE=1)
020A:297D  8D A5 20E2				lea	sp,cs:[20E2h][di]	; Load effective addr
020A:2981  A3 E2AE				mov	word ptr ds:[0E2AEh],ax	; (020A:E2AE=2607h)
020A:2984  AE					scasb				; Scan es:[di] for al
020A:2985  A2 AEAD				mov	byte ptr ds:[0AEADh],al	; (020A:AEAD=10h)
020A:2988  E1 E2				loopz	locloop_278		; Loop if zf=1, cx>0

020A:298A  A8 20				test	al,20h			; ' '
020A:298C  8D A5 E0AF				lea	sp,cs:[0E0AFh][di]	; Load effective addr
020A:2990  A0 A8A2				mov	al,byte ptr ds:[0A8A2h]	; (020A:A8A2=1)
020A:2993  AB					stosw				; Store ax to es:[di]
020A:2994  EC					in	al,dx			; port 0BF65h ??I/O Non-standard
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 63

020A:2995  AD					lodsw				; String [si] to ax
020A:2996  EB A9				jmp	short loc_272		; (2941)
020A:2998  20 A7 AFA0				and	byte ptr ds:[0AFA0h][bx],ah	; (020A:AFA0=2Eh)

020A:299C			locloop_283:
020A:299C  E0 AE		;*		loopnz	locloop_274		;*Loop if zf=0, cx>0

020A:299C  E0 AE				db	0E0h,0AEh
020A:299E  E1 20				loopz	locloop_287		; Loop if zf=1, cx>0

020A:29A0  AA			data_158	db	0AAh			; Data table (indexed access)
020A:29A1			loc_284:
020A:29A1  20 E3				and	bl,ah
020A:29A3  E1 E2		;*		loopz	locloop_281		;*Loop if zf=1, cx>0

020A:29A3  E1 E2				db	0E1h,0E2h
020A:29A5  E0 AE				loopnz	locloop_275		; Loop if zf=0, cx>0

020A:29A7  A9 E2E1				test	ax,0E2E1h
020A:29AA  A2 0FE3				mov	data_100,al		; (020A:0FE3=33h)
020A:29AD  8E					db	8Eh
020A:29AE  E8 A1A8				call	$-5E55h
020A:29B1  AA					stosb				; Store al to es:[di]
020A:29B2  A0 A220				mov	al,byte ptr ds:[0A220h]	; (020A:A220=1Ch)
020A:29B5  20 A4 ADA0				and	byte ptr ds:[0ADA0h][si],ah	; (020A:ADA0=0)
020A:29B9  AD					lodsw				; String [si] to ax
020A:29BA  EB E5				jmp	short loc_284		; (29A1)
020A:29BC  2B 8D AFA5				sub	cx,word ptr ds:[0AFA5h][di]	; (020A:AFA5=2E9Ch)

020A:29C0			locloop_287:
020A:29C0  E0 A0				loopnz	locloop_277		; Loop if zf=0, cx>0

020A:29C2  A2 ABA8				mov	byte ptr ds:[0ABA8h],al	; (020A:ABA8=6)
020A:29C5  EC					in	al,dx			; port 0BF65h ??I/O Non-standard
020A:29C6  AD					lodsw				; String [si] to ax
020A:29C7  EB A5				jmp	short loc_279		; (296E)
							                        ;* No entry point to code
020A:29C9  20 A0 A3E0				and	byte ptr ds:[0A3E0h][bx+si],ah	; (020A:A3E0=26h)
020A:29CD  E3 AC		;*		jcxz	locloop_280		;*Jump if cx=0
020A:29CD  E3 AC				db	0E3h,0ACh

020A:29CF			locloop_290:
020A:29CF  A5					movsw				; Mov [si] to es:[di]
020A:29D0  AD					lodsw				; String [si] to ax

020A:29D1			locloop_291:
020A:29D1  E2 EB		;*		loop	locloop_286		;*Loop if cx > 0

020A:29D1  E2 EB				db	0E2h,0EBh
020A:29D3  20 A7 AFA0				and	byte ptr ds:[0AFA0h][bx],ah	; (020A:AFA0=2Eh)
020A:29D7  E0 AE		;*		loopnz	locloop_281		;*Loop if zf=0, cx>0

020A:29D7  E0 AE				db	0E0h,0AEh
020A:29D9  E1 A0		;*		loopz	locloop_280		;*Loop if zf=1, cx>0

020A:29D9  E1 A0				db	0E1h,0A0h
020A:29DB  20 AA E320				and	[bp+si-1CE0h],ch
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 64

020A:29DF  E1 E2		;*		loopz	locloop_288		;*Loop if zf=1, cx>0

020A:29DF  E1 E2				db	0E1h,0E2h
020A:29E1  E0 AE		;*		loopnz	locloop_282		;*Loop if zf=0, cx>0

020A:29E1  E0 AE				db	0E0h,0AEh
020A:29E3  A9 E2E1				test	ax,0E2E1h
020A:29E6  A2 0DE3				mov	data_95,al		; (020A:0DE3=0EBh)
020A:29E9  8E					db	8Eh
020A:29EA  E8 A1A8				call	$-5E55h
020A:29ED  AA					stosb				; Store al to es:[di]
020A:29EE  A0 AF20				mov	al,byte ptr ds:[0AF20h]	; (020A:AF20=0E9h)
020A:29F1  AE					scasb				; Scan es:[di] for al
020A:29F2  A8 E1				test	al,0E1h
020A:29F4  AA					stosb				; Store al to es:[di]
020A:29F5  A0 8D19				mov	al,byte ptr ds:[8D19h]	; (020A:8D19=0Ah)
020A:29F8  A5					movsw				; Mov [si] to es:[di]
020A:29F9  AF					scasw				; Scan es:[di] for ax
020A:29FA  E0 A0				loopnz	locloop_283		; Loop if zf=0, cx>0


020A:29FC			locloop_292:
020A:29FC  A2 ABA8				mov	byte ptr ds:[0ABA8h],al	; (020A:ABA8=6)
020A:29FF  EC					in	al,dx			; port 0BF65h ??I/O Non-standard
020A:2A00  AD					lodsw				; String [si] to ax
020A:2A01  EB A9		;*		jmp	short loc_285		;*(29AC)
020A:2A01  EB A9				db	0EBh,0A9h
							                        ;* No entry point to code
020A:2A03  20 E2				and	dl,ah
020A:2A05  A8 AF				test	al,0AFh
020A:2A07  20 AD E1AE				and	byte ptr ds:[0E1AEh][di],ch	; (020A:E1AE=3Ch)
020A:2A0B  A8 E2				test	al,0E2h
020A:2A0D  A5					movsw				; Mov [si] to es:[di]
020A:2A0E  AB					stosw				; Store ax to es:[di]
020A:2A0F  EF					out	dx,ax			; port 0BF05h ??I/O Non-standard
020A:2A10  10 91 AAA5				adc	byte ptr ds:[0AAA5h][bx+di],dl	; (020A:AAA5=3)
020A:2A14  E2 AE		;*		loop	locloop_289		;*Loop if cx > 0

020A:2A14  E2 AE				db	0E2h,0AEh
020A:2A16  E0 20				loopnz	locloop_295		; Loop if zf=0, cx>0

020A:2A18  AD					lodsw				; String [si] to ax
020A:2A19  A5					movsw				; Mov [si] to es:[di]
020A:2A1A  20 AD A9A0				and	byte ptr ds:[0A9A0h][di],ch	; (020A:A9A0=80h)
020A:2A1E  A4					movsb				; Mov [si] to es:[di]
020A:2A1F  A5					movsw				; Mov [si] to es:[di]
020A:2A20  AD					lodsw				; String [si] to ax
020A:2A21  15 2082				adc	ax,2082h
020A:2A24  AF					scasw				; Scan es:[di] for ax
020A:2A25  E0 A8				loopnz	locloop_290		; Loop if zf=0, cx>0

020A:2A27  AD					lodsw				; String [si] to ax
020A:2A28  E2 A5				loop	locloop_290		; Loop if cx > 0

020A:2A2A  E0 A5				loopnz	locloop_291		; Loop if zf=0, cx>0

020A:2A2C  20 AD E2A5				and	byte ptr ds:[0E2A5h][di],ch	; (020A:E2A5=30h)
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 65

020A:2A30  20 A1 ACE3				and	byte ptr ds:[0ACE3h][bx+di],ah	; (020A:ACE3=74h)
020A:2A34  A0 A8A3				mov	al,byte ptr ds:[0A8A3h]	; (020A:A8A3=75h)
020A:2A37  11 8E A8E8				adc	[bp-5718h],cx
020A:2A3B  A1 A0AA				mov	ax,word ptr ds:[0A0AAh]	; (020A:A0AA=42ACh)
020A:2A3E  20 AF A8E0				and	byte ptr ds:[0A8E0h][bx],ch	; (020A:A8E0=74h)
020A:2A42  20 A7 AFA0				and	byte ptr ds:[0AFA0h][bx],ah	; (020A:AFA0=2Eh)
020A:2A46  A8 E1				test	al,0E1h
020A:2A48  A8 11				test	al,11h
020A:2A4A  8E					db	8Eh
020A:2A4B  E8 A1A8				call	$-5E55h

020A:2A4E			locloop_297:
020A:2A4E  AA					stosb				; Store al to es:[di]
020A:2A4F  A0 AF20				mov	al,byte ptr ds:[0AF20h]	; (020A:AF20=0E9h)
020A:2A52  E0 A8				loopnz	locloop_292		; Loop if zf=0, cx>0

020A:2A54  20 E7				and	bh,ah
020A:2A56  E2 A5		;*		loop	locloop_293		;*Loop if cx > 0

020A:2A56  E2 A5				db	0E2h,0A5h
020A:2A58  AD					lodsw				; String [si] to ax
020A:2A59  A8 A8				test	al,0A8h
020A:2A5B  12 8E E9A1				adc	cl,[bp-165Fh]
020A:2A5F  A8 A9				test	al,0A9h
020A:2A61  20 E1				and	cl,ah
020A:2A63  A1 A9AE				mov	ax,word ptr ds:[0A9AEh]	; (020A:A9AE=0A75h)
020A:2A66  20 E1				and	cl,ah
020A:2A68  A8 E1				test	al,0E1h
020A:2A6A  E2 A5		;*		loop	locloop_294		;*Loop if cx > 0

020A:2A6A  E2 A5				db	0E2h,0A5h
020A:2A6C  AC					lodsb				; String [si] to al
020A:2A6D  EB 24				jmp	short loc_303		; (2A93)
020A:2A6F  8D A0 E3E0				lea	sp,cs:[0E3E0h][bx+si]	; Load effective addr
020A:2A73  E8 ADA5				call	$-5258h
020A:2A76  A8 A5				test	al,0A5h
020A:2A78  20 E0				and	al,ah
020A:2A7A  A5					movsw				; Mov [si] to es:[di]

020A:2A7B			locloop_302:
020A:2A7B  A6					cmpsb				; Cmp [si] to es:[di]
020A:2A7C  A8 AC				test	al,0ACh
020A:2A7E  A0 E120				mov	al,byte ptr ds:[0E120h]	; (020A:E120=5Eh)
020A:2A81  AE					scasb				; Scan es:[di] for al
020A:2A82  A2 A5AC				mov	byte ptr ds:[0A5ACh],al	; (020A:A5AC=38h)
020A:2A85  E1 E2		;*		loopz	locloop_299		;*Loop if zf=1, cx>0

020A:2A85  E1 E2				db	0E1h,0E2h
020A:2A87  AD					lodsw				; String [si] to ax
020A:2A88  AE					scasb				; Scan es:[di] for al
020A:2A89  A3 20AE				mov	data_135,ax		; (020A:20AE=2020h)
020A:2A8C  A4					movsb				; Mov [si] to es:[di]
020A:2A8D  AE					scasb				; Scan es:[di] for al
020A:2A8E  E1 E2		;*		loopz	locloop_300		;*Loop if zf=1, cx>0

020A:2A8E  E1 E2				db	0E1h,0E2h
020A:2A90  E3 AF		;*		jcxz	loc_296			;*Jump if cx=0
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 66

020A:2A90  E3 AF				db	0E3h,0AFh
020A:2A92  A0 8D14				mov	al,byte ptr ds:[8D14h]	; (020A:8D14=7)
020A:2A95  A0 E3E0				mov	al,byte ptr ds:[0E3E0h]	; (020A:E3E0=5Eh)
020A:2A98  E8 ADA5				call	$-5258h
020A:2A9B  A8 A5				test	al,0A5h
020A:2A9D  20 A1 AEAB				and	byte ptr ds:[0AEABh][bx+di],ah	; (020A:AEAB=40h)
020A:2AA1  AA					stosb				; Store al to es:[di]
020A:2AA2  A8 E0				test	al,0E0h
020A:2AA4  AE					scasb				; Scan es:[di] for al
020A:2AA5  A2 A8AA				mov	byte ptr ds:[0A8AAh],al	; (020A:A8AA=74h)
020A:2AA8  18 8D AFA5				sbb	byte ptr ds:[0AFA5h][di],cl	; (020A:AFA5=9Ch)
020A:2AAC  E0 A0				loopnz	locloop_297		; Loop if zf=0, cx>0

020A:2AAE  A2 ABA8				mov	byte ptr ds:[0ABA8h],al	; (020A:ABA8=6)
020A:2AB1  EC					in	al,dx			; port 0BF05h ??I/O Non-standard

020A:2AB2			locloop_308:
020A:2AB2  AD					lodsw				; String [si] to ax
020A:2AB3  A0 20EF				mov	al,data_138		; (020A:20EF=0A0h)

020A:2AB6			locloop_309:
020A:2AB6  E1 AC		;*		loopz	locloop_298		;*Loop if zf=1, cx>0

020A:2AB6  E1 AC				db	0E1h,0ACh
020A:2AB8  A5					movsw				; Mov [si] to es:[di]
020A:2AB9  AD					lodsw				; String [si] to ax
020A:2ABA  A0 A420				mov	al,byte ptr ds:[0A420h]	; (020A:A420=3Bh)
020A:2ABD  A8 E1				test	al,0E1h
020A:2ABF  AA					stosb				; Store al to es:[di]
020A:2AC0  A0 8D27				mov	al,byte ptr ds:[8D27h]	; (020A:8D27=5Bh)
020A:2AC3  A5					movsw				; Mov [si] to es:[di]
020A:2AC4  A4					movsb				; Mov [si] to es:[di]
020A:2AC5  AE					scasb				; Scan es:[di] for al
020A:2AC6  E1 E2		;*		loopz	locloop_305		;*Loop if zf=1, cx>0

020A:2AC6  E1 E2				db	0E1h,0E2h
020A:2AC8  E3 AF		;*		jcxz	loc_301			;*Jump if cx=0
020A:2AC8  E3 AF				db	0E3h,0AFh
020A:2ACA  A5					movsw				; Mov [si] to es:[di]
020A:2ACB  AD					lodsw				; String [si] to ax
020A:2ACC  20 46 43				and	[bp+43h],al
020A:2ACF  42					inc	dx
020A:2AD0  20 28				and	[bx+si],ch
020A:2AD2  A1 AEAB				mov	ax,word ptr ds:[0AEABh]	; (020A:AEAB=3D40h)
020A:2AD5  AA					stosb				; Store al to es:[di]
020A:2AD6  20 E3				and	bl,ah

020A:2AD8			locloop_311:
020A:2AD8  AF					scasw				; Scan es:[di] for ax
020A:2AD9  E0 A0				loopnz	locloop_302		; Loop if zf=0, cx>0

020A:2ADB  A2 A5AB				mov	byte ptr ds:[0A5ABh],al	; (020A:A5AB=0A1h)
020A:2ADE  AD					lodsw				; String [si] to ax
020A:2ADF  A8 EF				test	al,0EFh
020A:2AE1  20 E4				and	ah,ah
020A:2AE3  A0 ABA9				mov	al,byte ptr ds:[0ABA9h]	; (020A:ABA9=0F0h)
020A:2AE6  AE					scasb				; Scan es:[di] for al
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 67

020A:2AE7  AC					lodsb				; String [si] to al
020A:2AE8  29 19				sub	[bx+di],bx
020A:2AEA  90					nop
020A:2AEB  A5					movsw				; Mov [si] to es:[di]
020A:2AEC  E1 E3		;*		loopz	locloop_310		;*Loop if zf=1, cx>0

020A:2AEC  E1 E3				db	0E1h,0E3h
020A:2AEE  E0 E1		;*		loopnz	locloop_310		;*Loop if zf=0, cx>0

020A:2AEE  E0 E1				db	0E0h,0E1h
020A:2AF0  EB 20				jmp	short loc_316		; (2B12)
020A:2AF2  E1 A8		;*		loopz	locloop_304		;*Loop if zf=1, cx>0

020A:2AF2  E1 A8				db	0E1h,0A8h
020A:2AF4  E1 E2				loopz	locloop_311		; Loop if zf=1, cx>0

020A:2AF6  A5					movsw				; Mov [si] to es:[di]
020A:2AF7  AC					lodsb				; String [si] to al
020A:2AF8  EB 20				jmp	short loc_317		; (2B1A)
020A:2AFA  A8 E1				test	al,0E1h
020A:2AFC  E7 A5				out	0A5h,ax			; port 0A5h ??I/O Non-standard

020A:2AFE			locloop_314:
020A:2AFE  E0 AF		;*		loopnz	locloop_307		;*Loop if zf=0, cx>0

020A:2AFE  E0 AF				db	0E0h,0AFh
020A:2B00  A0 EBAD				mov	al,byte ptr ds:[0EBADh]	; (020A:EBAD=74h)
020A:2B03  8D1E			data_159	dw	8D1Eh			; Data table (indexed access)
020A:2B05  A5					movsw				; Mov [si] to es:[di]
020A:2B06  E1 AE				loopz	locloop_309		; Loop if zf=1, cx>0

020A:2B08  AE					scasb				; Scan es:[di] for al
020A:2B09  E2 A2		;*		loop	locloop_306		;*Loop if cx > 0

020A:2B09  E2 A2				db	0E2h,0A2h

020A:2B0B			locloop_315:
020A:2B0B  A5					movsw				; Mov [si] to es:[di]
020A:2B0C  E2 E1		;*		loop	locloop_312		;*Loop if cx > 0

020A:2B0C  E2 E1				db	0E2h,0E1h
020A:2B0E  E2 A2				loop	locloop_308		; Loop if cx > 0

020A:2B10  A8 A5				test	al,0A5h
020A:2B12			loc_316:
020A:2B12  20 AA A4AE				and	[bp+si-5B52h],ch
020A:2B16  AE					scasb				; Scan es:[di] for al
020A:2B17  A2 E5EB				mov	byte ptr ds:[0E5EBh],al	; (020A:E5EB=5Dh)
020A:2B1A			loc_317:
020A:2B1A  20 E1				and	cl,ah
020A:2B1C  E2 E0				loop	locloop_314		; Loop if cx > 0

020A:2B1E			loc_318:
020A:2B1E  A0 A8AD				mov	al,byte ptr ds:[0A8ADh]	; (020A:A8AD=88h)
020A:2B21  E6 1D				out	1Dh,al			; port 1Dh ??I/O Non-standard
020A:2B23  8D A5 AEA4				lea	sp,cs:[0AEA4h][di]	; Load effective addr
020A:2B27  E1 E2				loopz	locloop_315		; Loop if zf=1, cx>0
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 68



020A:2B29			locloop_320:
020A:2B29  A0 AEE2				mov	al,byte ptr ds:[0AEE2h]	; (020A:AEE2=16h)
020A:2B2C  E7 AD				out	0ADh,ax			; port 0ADh ??I/O Non-standard
020A:2B2E  AE					scasb				; Scan es:[di] for al
020A:2B2F  20 A2 A5A2				and	[bp+si-5A5Eh],ah
020A:2B33  A4					movsb				; Mov [si] to es:[di]
020A:2B34  A5					movsw				; Mov [si] to es:[di]
020A:2B35  AD					lodsw				; String [si] to ax
020A:2B36  AD					lodsw				; String [si] to ax
020A:2B37  EB E5				jmp	short loc_318		; (2B1E)
							                        ;* No entry point to code
020A:2B39  20 A4 ADA0				and	byte ptr ds:[0ADA0h][si],ah	; (020A:ADA0=0)
020A:2B3D  AD					lodsw				; String [si] to ax
020A:2B3E  EB E5		;*		jmp	short loc_319		;*(2B25)
020A:2B3E  EB E5				db	0EBh,0E5h
							                        ;* No entry point to code
020A:2B40  1B 8D A4A5				sbb	cx,word ptr ds:[0A4A5h][di]	; (020A:A4A5=2A9h)
020A:2B44  AE					scasb				; Scan es:[di] for al
020A:2B45  E1 E2				loopz	locloop_320		; Loop if zf=1, cx>0

020A:2B47  A0 AEE2				mov	al,byte ptr ds:[0AEE2h]	; (020A:AEE2=16h)
020A:2B4A  E7 AD				out	0ADh,ax			; port 0ADh ??I/O Non-standard
020A:2B4C  AE					scasb				; Scan es:[di] for al
020A:2B4D  20 AC E1A5				and	byte ptr ds:[0E1A5h][si],ch	; (020A:E1A5=4Eh)
020A:2B51  E2 A0		;*		loop	locloop_313		;*Loop if cx > 0

020A:2B51  E2 A0				db	0E2h,0A0h
020A:2B53  20 AD 20A0				and	data_132[di],ch		; (020A:20A0=20h)
020A:2B57  A4					movsb				; Mov [si] to es:[di]
020A:2B58  A8 E1				test	al,0E1h
020A:2B5A  AA					stosb				; Store al to es:[di]
020A:2B5B  A5					movsw				; Mov [si] to es:[di]
020A:2B5C  0C 09				or	al,9
020A:2B5E  24 09				and	al,9
020A:2B60  3C 09				cmp	al,9
020A:2B62  4B					dec	bx
020A:2B63  09 6C 09				or	[si+9],bp
020A:2B66  7C 09				jl	loc_321			; Jump if <
020A:2B68  A8 09				test	al,9
020A:2B6A  B6 09				mov	dh,9
020A:2B6C  D0 09				ror	byte ptr [bx+di],1	; Rotate
020A:2B6E  E1 09				loopz	locloop_322		; Loop if zf=1, cx>0

020A:2B70  F7					db	0F7h
020A:2B71			loc_321:
020A:2B71  09 09				or	[bx+di],cx
020A:2B73  0A 1B				or	bl,[bp+di]
020A:2B75  0A 2E 530A				or	ch,byte ptr ds:[530Ah]	; (020A:530A=0B9h)

020A:2B79			locloop_322:
020A:2B79  0A 68 0A				or	ch,[bx+si+0Ah]
020A:2B7C  81 0A 0AA9				or	word ptr [bp+si],0AA9h
020A:2B80  C3					retn
							                        ;* No entry point to code
020A:2B81  0A E2				or	ah,dl
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 69

020A:2B83  0A 00				or	al,[bx+si]
020A:2B85  0B 18				or	bx,[bx+si]
020A:2B87  91					xchg	cx,ax
020A:2B88  AB					stosw				; Store ax to es:[di]
020A:2B89  A8 E8				test	al,0E8h
020A:2B8B  AA					stosb				; Store al to es:[di]
020A:2B8C  AE					scasb				; Scan es:[di] for al
020A:2B8D  AC					lodsb				; String [si] to al
020A:2B8E  20 AC 004D				and	byte ptr ds:[4Dh][si],ch	; (020A:004D=82h)
020A:2B92  00 07				add	[bx],al
020A:2B94  00 AF E0A0				add	byte ptr ds:[0E0A0h][bx],ch	; (020A:E0A0=44h)
020A:2B98  A0 A5AC				mov	al,byte ptr ds:[0A5ACh]	; (020A:A5AC=38h)
020A:2B9B  E2 E0		;*		loop	locloop_323		;*Loop if cx > 0

020A:2B9B  E2 E0				db	0E2h,0E0h
020A:2B9D  AE					scasb				; Scan es:[di] for al
020A:2B9E  A2 0021				mov	byte ptr data_14+3,al	; (020A:0021=0A3h)
020A:2BA1  01 00				add	[bx+si],ax

020A:2BA3			locloop_324:
020A:2BA3  00					db	0
020A:2BA4  00					db	0
020A:2BA5  00 00				add	[bx+si],al
020A:2BA7  00 C4				add	ah,al
020A:2BA9  0C 00				or	al,0
020A:2BAB  00 FF				add	bh,bh
020A:2BAD  0013[FF]				db	19 dup (0FFh)
020A:2BC0  43					inc	bx
020A:2BC1  3A 5C 57				cmp	bl,[si+57h]
020A:2BC4  49					dec	cx
020A:2BC5  4E					dec	si
020A:2BC6  44					inc	sp
020A:2BC7  4F					dec	di
020A:2BC8  57					push	di
020A:2BC9  53					push	bx
020A:2BCA  5C					pop	sp
020A:2BCB  54					push	sp
020A:2BCC  45					inc	bp
020A:2BCD  4D					dec	bp
020A:2BCE  50					push	ax
020A:2BCF  5C					pop	sp
020A:2BD0  73 63				jnc	loc_328			; Jump if carry=0
020A:2BD2  73 31				jnc	loc_327			; Jump if carry=0
020A:2BD4  34 2E				xor	al,2Eh			; '.'
020A:2BD6  74 6D				jz	loc_330			; Jump if zero
020A:2BD8  70 00				jo	$+2			; delay for I/O
020A:2BDA  0027[00]				db	39 dup (0)
020A:2C01  E0 A0				loopnz	locloop_324		; Loop if zf=0, cx>0

020A:2C03  AC					lodsb				; String [si] to al
020A:2C04  A5					movsw				; Mov [si] to es:[di]
020A:2C05			loc_327:
020A:2C05  E2 E0		;*		loop	locloop_325		;*Loop if cx > 0

020A:2C05  E2 E0				db	0E2h,0E0h
020A:2C07  A0 A220				mov	al,byte ptr ds:[0A220h]	; (020A:A220=1Ch)
020A:2C0A  EB E5		;*		jmp	short loc_326		;*(2BF1)
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 70

020A:2C0A  EB E5				db	0EBh,0E5h
							                        ;* No entry point to code
020A:2C0C  AE					scasb				; Scan es:[di] for al
020A:2C0D  A4					movsb				; Mov [si] to es:[di]
020A:2C0E  A8 E2				test	al,0E2h
020A:2C10  4D					dec	bp
020A:2C11  0E					push	cs
020A:2C12  04 44				add	al,44h			; 'D'
020A:2C14  00 E0				add	al,ah
020A:2C16  A5					movsw				; Mov [si] to es:[di]
020A:2C17  A4					movsb				; Mov [si] to es:[di]
020A:2C18  A5					movsw				; Mov [si] to es:[di]
020A:2C19  AB					stosw				; Store ax to es:[di]
020A:2C1A  EB 20				jmp	short loc_329		; (2C3C)
020A:2C1C  A4					movsb				; Mov [si] to es:[di]
020A:2C1D  AE					scasb				; Scan es:[di] for al
020A:2C1E  AF					scasw				; Scan es:[di] for ax
020A:2C1F  E3 43				jcxz	loc_331			; Jump if cx=0
020A:2C21  4F 4D 53 50 45 43			db	'OMSPEC=C:\WINDOWS\SYSTEM32\COMMA'
020A:2C27  3D 43 3A 5C 57 49
020A:2C2D  4E 44 4F 57 53 5C
020A:2C33  53 59 53 54 45 4D
020A:2C39  33 32 5C 43 4F 4D
020A:2C3F  4D 41
020A:2C41  4E 44 2E 43 4F 4D			db	'ND.COM', 0
020A:2C47  00
020A:2C48  41 4C 4C 55 53 45			db	'ALLUSERSPROFILE=C:\DOCUME~1\ALLU'
020A:2C4E  52 53 50 52 4F 46
020A:2C54  49 4C 45 3D 43 3A
020A:2C5A  5C 44 4F 43 55 4D
020A:2C60  45 7E 31 5C 41 4C
020A:2C66  4C 55
020A:2C68  53 45 7E 31 00			db	'SE~1', 0
020A:2C6D  41 50 50 44 41 54			db	'APPDATA=C:\DOCUME~1\9335~1\APPLI'
020A:2C73  41 3D 43 3A 5C 44
020A:2C79  4F 43 55 4D 45 7E
020A:2C7F  31 5C 39 33 33 35
020A:2C85  7E 31 5C 41 50 50
020A:2C8B  4C 49
020A:2C8D  43 7E 31 00				db	'C~1', 0
020A:2C91  43 4C 49 45 4E 54			db	'CLIENTNAME=Console', 0
020A:2C97  4E 41 4D 45 3D 43
020A:2C9D  6F 6E 73 6F 6C 65
020A:2CA3  00
020A:2CA4  43 4F 4D 4D 4F 4E			db	'COMMONPROGRAMFILES=C:\PROGRA~1\C'
020A:2CAA  50 52 4F 47 52 41
020A:2CB0  4D 46 49 4C 45 53
020A:2CB6  3D 43 3A 5C 50 52
020A:2CBC  4F 47 52 41 7E 31
020A:2CC2  5C 43
020A:2CC4  4F 4D 4D 4F 4E 7E			db	'OMMON~1', 0
020A:2CCA  31 00
020A:2CCC  43 4F 4D 50 55 54			db	'COMPUTERNAME=DAN-350B93BA783', 0
020A:2CD2  45 52 4E 41 4D 45
020A:2CD8  3D 44 41 4E 2D 33
020A:2CDE  35 30 42 39 33 42
020A:2CE4  41 37 38 33 00
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 71

020A:2CE9  46 50 5F 4E 4F 5F			db	'FP_NO_HOST_CHECK=NO', 0
020A:2CEF  48 4F 53 54 5F 43
020A:2CF5  48 45 43 4B 3D 4E
020A:2CFB  4F 00
020A:2CFD  48 4F 4D 45 44 52			db	'HOMEDRIVE=C:', 0
020A:2D03  49 56 45 3D 43 3A
020A:2D09  00
020A:2D0A  48 4F 4D 45 50 41			db	'HOMEPATH=\Documents and Settings'
020A:2D10  54 48 3D 5C 44 6F
020A:2D16  63 75 6D 65 6E 74
020A:2D1C  73 20 61 6E 64 20
020A:2D22  53 65 74 74 69 6E
020A:2D28  67 73
020A:2D2A  5C 5F				db	'\_'
020A:2D2C  FD					std				; Set direction flag
020A:2D2D  BF 2DF0				mov	di,2DF0h
020A:2D30  F0> A1 A0A2		                           lock	mov	ax,word ptr ds:[0A0A2h]	; (020A:A0A2=0BB13h)
020A:2D34  FF A2 A052				jmp	word ptr [bp+si-5FAEh]	;*
020A:2D38  00 4C 4F				add	[si+4Fh],cl
020A:2D3B  47 4F 4E 53 45 52			db	'GONSERVER=\\DAN-350B93BA783', 0
020A:2D41  56 45 52 3D 5C 5C
020A:2D47  44 41 4E 2D 33 35
020A:2D4D  30 42 39 33 42 41
020A:2D53  37 38 33 00
020A:2D57  4E 55 4D 42 45 52			db	'NUMBER_OF_PROCESSORS=1', 0
020A:2D5D  5F 4F 46 5F 50 52
020A:2D63  4F 43 45 53 53 4F
020A:2D69  52 53 3D 31 00
020A:2D6E  4F 53 3D 57 69 6E			db	'OS=Windows_NT', 0
020A:2D74  64 6F 77 73 5F 4E
020A:2D7A  54 00
020A:2D7C  50 41 54 48 3D 43			db	'PATH=C:\WINDOWS\system32;C:\WIND'
020A:2D82  3A 5C 57 49 4E 44
020A:2D88  4F 57 53 5C 73 79
020A:2D8E  73 74 65 6D 33 32
020A:2D94  3B 43 3A 5C 57 49
020A:2D9A  4E 44
020A:2D9C  4F 57 53 3B 43 3A			db	'OWS;C:\WINDOWS\System32\Wbem', 0
020A:2DA2  5C 57 49 4E 44 4F
020A:2DA8  57 53 5C 53 79 73
020A:2DAE  74 65 6D 33 32 5C
020A:2DB4  57 62 65 6D 00
020A:2DB9  50 41 54 48 45 58			db	'PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS'
020A:2DBF  54 3D 2E 43 4F 4D
020A:2DC5  3B 2E 45 58 45 3B
020A:2DCB  2E 42 41 54 3B 2E
020A:2DD1  43 4D 44 3B 2E 56
020A:2DD7  42 53
020A:2DD9  3B 2E 56 42 45 3B			db	';.VBE;.JS;.JSE;.WSF;.WSH', 0
020A:2DDF  2E 4A 53 3B 2E 4A
020A:2DE5  53 45 3B 2E 57 53
020A:2DEB  46 3B 2E 57 53 48
020A:2DF1  00
020A:2DF2  50 52 4F 43 45 53			db	'PROCESSOR_ARCHITECTURE=x86', 0
020A:2DF8  53 4F 52 5F 41 52
020A:2DFE  43 48 49 54 45 43
020A:2E04  54 55 52 45 3D 78
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 72

020A:2E0A  38 36 00
020A:2E0D  50 52 4F 43 45 53			db	'PROCESSOR_IDENTIFIER=x86 Family '
020A:2E13  53 4F 52 5F 49 44
020A:2E19  45 4E 54 49 46 49
020A:2E1F  45 52 3D 78 38 36
020A:2E25  20 46 61 6D 69 6C
020A:2E2B  79 20
020A:2E2D  36 20 4D 6F 64 65			db	'6 Model 69 Stepping 1, GenuineIn'
020A:2E33  6C 20 36 39 20 53
020A:2E39  74 65 70 70 69 6E
020A:2E3F  67 20 31 2C 20 47
020A:2E45  65 6E 75 69 6E 65
020A:2E4B  49 6E
020A:2E4D  74 65 6C 00				db	'tel', 0
020A:2E51  50 52 4F 43 45 53			db	'PROCESSOR_LEVEL=6', 0
020A:2E57  53 4F 52 5F 4C 45
020A:2E5D  56 45 4C 3D 36 00
020A:2E63  50 52 4F 43 45 53			db	'PROCESSOR_REVISION=4501', 0
020A:2E69  53 4F 52 5F 52 45
020A:2E6F  56 49 53 49 4F 4E
020A:2E75  3D 34 35 30 31 00
020A:2E7B  50 52 4F 47 52 41			db	'PROGRAMFILES=C:\PROGRA~1', 0
020A:2E81  4D 46 49 4C 45 53
020A:2E87  3D 43 3A 5C 50 52
020A:2E8D  4F 47 52 41 7E 31
020A:2E93  00
020A:2E94  50 52 4F 4D 50 54			db	'PROMPT=$'
020A:2E9A  3D 24
020A:2E9C  50 24				db	'P$'
020A:2E9E  47 00				db	'G', 0
020A:2EA0  53 45 53 53 49 4F			db	'SESSIONNAME=Console', 0
020A:2EA6  4E 4E 41 4D 45 3D
020A:2EAC  43 6F 6E 73 6F 6C
020A:2EB2  65 00
020A:2EB4  53 59 53 54 45 4D			db	'SYSTEMDRIVE=C:', 0
020A:2EBA  44 52 49 56 45 3D
020A:2EC0  43 3A 00
020A:2EC3  53 59 53 54 45 4D			db	'SYSTEMROOT=C:\WINDOWS', 0
020A:2EC9  52 4F 4F 54 3D 43
020A:2ECF  3A 5C 57 49 4E 44
020A:2ED5  4F 57 53 00
020A:2ED9  54 45 4D 50 3D 43			db	'TEMP=C:\WINDOWS\TEMP', 0
020A:2EDF  3A 5C 57 49 4E 44
020A:2EE5  4F 57 53 5C 54 45
020A:2EEB  4D 50 00
020A:2EEE  54 4D 50 3D 43 3A			db	'TMP=C:\WINDOWS\TEMP', 0
020A:2EF4  5C 57 49 4E 44 4F
020A:2EFA  57 53 5C 54 45 4D
020A:2F00  50 00
020A:2F02  55 53 45 52 44 4F			db	'USERDOMAIN=DAN-350B93BA783', 0
020A:2F08  4D 41 49 4E 3D 44
020A:2F0E  41 4E 2D 33 35 30
020A:2F14  42 39 33 42 41 37
020A:2F1A  38 33 00
020A:2F1D  55 53 45 52 4E 41			db	'USERNAME=_'
020A:2F23  4D 45 3D 5F
020A:2F27  FD					std				; Set direction flag
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 73

020A:2F28  BF 2DF0				mov	di,2DF0h
020A:2F2B  F0> A1 A0A2		                           lock	mov	ax,word ptr ds:[0A0A2h]	; (020A:A0A2=0BB13h)
020A:2F2F  FF A2 A052				jmp	word ptr [bp+si-5FAEh]	;*
020A:2F33  00 55 53				add	[di+53h],dl
020A:2F36  45 52 50 52 4F 46			db	'ERPROFILE=C:\DOCUME~1\9335~1', 0
020A:2F3C  49 4C 45 3D 43 3A
020A:2F42  5C 44 4F 43 55 4D
020A:2F48  45 7E 31 5C 39 33
020A:2F4E  33 35 7E 31 00
020A:2F53  42 4C 41 53 54 45			db	'BLASTER=A220 I5 D1 P330 T3'
020A:2F59  52 3D 41 32 32 30
020A:2F5F  20 49 35 20 44 31
020A:2F65  20 50 33 33 30 20
020A:2F6B  54 33
020A:2F6D  00 00				add	[bx+si],al
020A:2F6F  92					xchg	dx,ax
020A:2F70  E0 A5		;*		loopnz	locloop_332		;*Loop if zf=0, cx>0

020A:2F70  E0 A5				db	0E0h,0A5h
020A:2F72  A1 A5E3				mov	ax,word ptr ds:[0A5E3h]	; (020A:A5E3=0EAC7h)
020A:2F75  AC					lodsb				; String [si] to al
020A:2F76  EB A9		;*		jmp	short loc_333		;*(2F21)
020A:2F76  EB A9				db	0EBh,0A9h
							                        ;* No entry point to code
020A:2F78  20 AA ACAE				and	[bp+si-5352h],ch
020A:2F7C  AF					scasw				; Scan es:[di] for ax
020A:2F7D  AE					scasb				; Scan es:[di] for al
020A:2F7E  AD					lodsw				; String [si] to ax
020A:2F7F  A5					movsw				; Mov [si] to es:[di]
020A:2F80  AD					lodsw				; String [si] to ax
020A:2F81  E2 20				loop	locloop_337		; Loop if cx > 0

020A:2F83  E1 A8		;*		loopz	locloop_334		;*Loop if zf=1, cx>0

020A:2F83  E1 A8				db	0E1h,0A8h
020A:2F85  E1 E2		;*		loopz	locloop_335		;*Loop if zf=1, cx>0

020A:2F85  E1 E2				db	0E1h,0E2h
020A:2F87  A5					movsw				; Mov [si] to es:[di]
020A:2F88  AC					lodsb				; String [si] to al
020A:2F89  EB 20				jmp	short loc_338		; (2FAB)
							                        ;* No entry point to code
020A:2F8B  AD					lodsw				; String [si] to ax
020A:2F8C  A5					movsw				; Mov [si] to es:[di]
020A:2F8D  20 E3				and	bl,ah
020A:2F8F  E1 E2		;*		loopz	locloop_336		;*Loop if zf=1, cx>0

020A:2F8F  E1 E2				db	0E1h,0E2h
020A:2F91  A0 AEAD				mov	al,byte ptr ds:[0AEADh]	; (020A:AEAD=10h)
020A:2F94  A2 A5AB				mov	byte ptr ds:[0A5ABh],al	; (020A:A5AB=0A1h)
020A:2F97  AD					lodsw				; String [si] to ax
020A:2F98  9D					popf				; Pop flags
020A:2F99  0C B2				or	al,0B2h
020A:2F9B  0C C1				or	al,0C1h
020A:2F9D  0C D0				or	al,0D0h
020A:2F9F  0C ED				or	al,0EDh
020A:2FA1  0C FA				or	al,0FAh
           den.lst				Sourcer	v5.10   16-Sep-20   3:09 pm   Page 74


020A:2FA3			locloop_337:
020A:2FA3  0C 12				or	al,12h
020A:2FA5  0D 0D35				or	ax,0D35h
020A:2FA8  49					dec	cx
020A:2FA9  0D 0D69				or	ax,0D69h
020A:2FAC  91					xchg	cx,ax
020A:2FAD  0D 0DA5				or	ax,0DA5h
020A:2FB0  C3					retn
020A:2FB1  0D 0000				or	ax,0
020A:2FB4  D7					xlat				; al=[al+[bx]] table
020A:2FB5  0D 0DEE				or	ax,0DEEh
020A:2FB8  0E					push	cs
020A:2FB9  0E					push	cs
020A:2FBA  20 0E 090C				and	byte ptr ds:[90Ch],cl	; (020A:090C=0Eh)
020A:2FBE  24 09				and	al,9
020A:2FC0  3C 09				cmp	al,9
020A:2FC2  4B					dec	bx
020A:2FC3  09 6C 09				or	[si+9],bp
020A:2FC6  7C 09				jl	loc_339			; Jump if <
020A:2FC8  A8 09				test	al,9
020A:2FCA  B6 09				mov	dh,9
020A:2FCC  D0 09				ror	byte ptr [bx+di],1	; Rotate
020A:2FCE  E1 09				loopz	locloop_340		; Loop if zf=1, cx>0

020A:2FD0  F7					db	0F7h
020A:2FD1			loc_339:
020A:2FD1  09 09				or	[bx+di],cx
020A:2FD3  0A 1B				or	bl,[bp+di]
020A:2FD5  0A 2E 530A				or	ch,byte ptr ds:[530Ah]	; (020A:530A=0B9h)

020A:2FD9			locloop_340:
020A:2FD9  0A 68 0A				or	ch,[bx+si+0Ah]
020A:2FDC  81 0A 0AA9				or	word ptr [bp+si],0AA9h
020A:2FE0  C3					retn
							                        ;* No entry point to code
020A:2FE1  0A E2				or	ah,dl
020A:2FE3  0A 00				or	al,[bx+si]
020A:2FE5  0B 00				or	ax,[bx+si]
020A:2FE7  001A[00]				db	26 dup (0)

